/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { EnzymeLendingPoolManager } from "./EnzymeLendingPoolManager";

export class EnzymeLendingPoolManagerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<EnzymeLendingPoolManager> {
    return super.deploy(overrides || {}) as Promise<EnzymeLendingPoolManager>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EnzymeLendingPoolManager {
    return super.attach(address) as EnzymeLendingPoolManager;
  }
  connect(signer: Signer): EnzymeLendingPoolManagerFactory {
    return super.connect(signer) as EnzymeLendingPoolManagerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EnzymeLendingPoolManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EnzymeLendingPoolManager;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "fromAsset",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAsset",
        type: "address",
      },
    ],
    name: "makeEnzymePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610764806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df0548ef14610030575b600080fd5b61005e6004803603604081101561004657600080fd5b506001600160a01b0381358116916020013516610060565b005b610068610641565b6001600160a01b038381166000818152600160208181526040808420808401546001600160801b038082168a860152600160801b9182900481168a850152600283015480821660608c0152829004811660808b0152600383015490811660a08b01520464ffffffffff1660c089015288871660e08901526005810154871661010089015260068101548716610120890152600781015490961661014088015293909252815291548351528051808201909152601c81527f6d616b65456e7a796d65506f6f6c3a53657420616464726573736573000000009181019190915261014f90610353565b805161015c9060016103fc565b805161016990600161042a565b6101a76040518060400160405280601881526020017f6d616b65456e7a796d65506f6f6c3a7365742063616c6c730000000000000000815250610353565b6001600160a01b038281166000908152600160208181526040928390208551518155858201519281018054878601516fffffffffffffffffffffffffffffffff199182166001600160801b03968716178616600160801b918716820217909255606088015160028401805460808b0151908416928816929092178716918716840291909117905560a088015160038401805460c08b01519316919096161764ffffffffff60801b191664ffffffffff9091169091021790925560e08501516004830180546001600160a01b031990811692871692909217905561010086015160058401805483169187169190911790556101208601516006840180548316918716919091179055610140860151600790930180546101608801519216939095169290921760ff60a01b1916600160a01b60ff90931692909202919091179092558051808201909152601a81527f6d616b65456e7a796d65506f6f6c3a53657420726573657276650000000000009181019190915261032490610353565b61032d82610458565b61034e6040518060600160405280602481526020016106e960249139610353565b505050565b6103f9816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561039757818101518382015260200161037f565b50505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052925061056e915050565b50565b603a8161040a57600061040d565b60015b8351670400000000000000191660ff9190911690911b1790915250565b603b8161043857600061043b565b60015b8351670800000000000000191660ff9190911690911b1790915250565b6000600454905061048160405180606001604052806022815260200161070d602291398261058f565b6104a56040518060600160405280602981526020016106c06029913960085461058f565b6001600160a01b038216600090815260016020526040812060070154600160a01b900460ff1615158061050d57506000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff546001600160a01b038481169116145b90508061034e57506001600160a01b03919091166000818152600160208181526040808420600701805460ff60a01b1916600160a01b60ff891602179055858452600390915290912080546001600160a01b03191690921790915501600455565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61063d82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156105da5781810151838201526020016105c2565b50505050905090810190601f1680156106075780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052935061056e92505050565b5050565b6040518061018001604052806106556106ac565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082018190526101609091015290565b604051806020016040528060008152509056fe5f61646452657365727665546f4c6973742d5f6d61784e756d6265724f6652657365727665733a25646d616b65456e7a796d65506f6f6c3a536574205f61646452657365727665546f4c6973745f61646452657365727665546f4c6973742d7265736572766573436f756e743a2564a2646970667358221220fb9f16bd25ad51c2c82a231175181cafca46804d4b7968c961aac04de65ee4d564736f6c634300060c0033";
