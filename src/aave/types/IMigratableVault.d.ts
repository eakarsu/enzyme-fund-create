/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMigratableVaultInterface extends ethers.utils.Interface {
  functions: {
    "canMigrate(address)": FunctionFragment;
    "init(address,address,string)": FunctionFragment;
    "setAccessor(address)": FunctionFragment;
    "setVaultLib(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "canMigrate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setAccessor", values: [string]): string;
  encodeFunctionData(functionFragment: "setVaultLib", values: [string]): string;

  decodeFunctionResult(functionFragment: "canMigrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultLib",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMigratableVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMigratableVaultInterface;

  functions: {
    canMigrate(
      _who: string,
      overrides?: CallOverrides
    ): Promise<{
      canMigrate_: boolean;
      0: boolean;
    }>;

    "canMigrate(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<{
      canMigrate_: boolean;
      0: boolean;
    }>;

    init(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,string)"(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccessor(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccessor(address)"(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultLib(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultLib(address)"(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  canMigrate(_who: string, overrides?: CallOverrides): Promise<boolean>;

  "canMigrate(address)"(
    _who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _owner: string,
    _accessor: string,
    _fundName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,string)"(
    _owner: string,
    _accessor: string,
    _fundName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccessor(
    _nextAccessor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccessor(address)"(
    _nextAccessor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultLib(
    _nextVaultLib: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultLib(address)"(
    _nextVaultLib: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    canMigrate(_who: string, overrides?: CallOverrides): Promise<boolean>;

    "canMigrate(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,string)"(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccessor(
      _nextAccessor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAccessor(address)"(
      _nextAccessor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultLib(
      _nextVaultLib: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultLib(address)"(
      _nextVaultLib: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canMigrate(_who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canMigrate(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,string)"(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAccessor(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccessor(address)"(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultLib(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultLib(address)"(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canMigrate(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canMigrate(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,string)"(
      _owner: string,
      _accessor: string,
      _fundName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAccessor(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccessor(address)"(
      _nextAccessor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultLib(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultLib(address)"(
      _nextVaultLib: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
