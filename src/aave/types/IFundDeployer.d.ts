/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IFundDeployerInterface extends ethers.utils.Interface {
  functions: {
    "createNewFund(address,string,address,uint256,bytes,bytes)": FunctionFragment;
    "getComptrollerLib()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getVaultLib()": FunctionFragment;
    "hasReconfigurationRequest(address)": FunctionFragment;
    "isAllowedBuySharesOnBehalfCaller(address)": FunctionFragment;
    "isAllowedVaultCall(address,bytes4,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewFund",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComptrollerLib",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultLib",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasReconfigurationRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedBuySharesOnBehalfCaller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedVaultCall",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComptrollerLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReconfigurationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedBuySharesOnBehalfCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedVaultCall",
    data: BytesLike
  ): Result;

  events: {};
}

export class IFundDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFundDeployerInterface;

  functions: {
    createNewFund(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewFund(address,string,address,uint256,bytes,bytes)"(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getComptrollerLib(overrides?: CallOverrides): Promise<{
      comptrollerLib_: string;
      0: string;
    }>;

    "getComptrollerLib()"(overrides?: CallOverrides): Promise<{
      comptrollerLib_: string;
      0: string;
    }>;

    getOwner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getOwner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getVaultLib(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVaultLib()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    hasReconfigurationRequest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasReconfigurationRequest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isAllowedBuySharesOnBehalfCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAllowedBuySharesOnBehalfCaller(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isAllowedVaultCall(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAllowedVaultCall(address,bytes4,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  createNewFund(
    _fundOwner: string,
    _fundName: string,
    _denominationAsset: string,
    _sharesActionTimelock: BigNumberish,
    _feeManagerConfigData: BytesLike,
    _policyManagerConfigData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewFund(address,string,address,uint256,bytes,bytes)"(
    _fundOwner: string,
    _fundName: string,
    _denominationAsset: string,
    _sharesActionTimelock: BigNumberish,
    _feeManagerConfigData: BytesLike,
    _policyManagerConfigData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getComptrollerLib(overrides?: CallOverrides): Promise<string>;

  "getComptrollerLib()"(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getVaultLib(overrides?: CallOverrides): Promise<string>;

  "getVaultLib()"(overrides?: CallOverrides): Promise<string>;

  hasReconfigurationRequest(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasReconfigurationRequest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedBuySharesOnBehalfCaller(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedBuySharesOnBehalfCaller(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedVaultCall(
    arg0: string,
    arg1: BytesLike,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedVaultCall(address,bytes4,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createNewFund(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      comptrollerProxy_: string;
      vaultProxy_: string;
      0: string;
      1: string;
    }>;

    "createNewFund(address,string,address,uint256,bytes,bytes)"(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      comptrollerProxy_: string;
      vaultProxy_: string;
      0: string;
      1: string;
    }>;

    getComptrollerLib(overrides?: CallOverrides): Promise<string>;

    "getComptrollerLib()"(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getVaultLib(overrides?: CallOverrides): Promise<string>;

    "getVaultLib()"(overrides?: CallOverrides): Promise<string>;

    hasReconfigurationRequest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasReconfigurationRequest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedBuySharesOnBehalfCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedBuySharesOnBehalfCaller(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedVaultCall(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedVaultCall(address,bytes4,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createNewFund(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewFund(address,string,address,uint256,bytes,bytes)"(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getComptrollerLib(overrides?: CallOverrides): Promise<BigNumber>;

    "getComptrollerLib()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultLib(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultLib()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasReconfigurationRequest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasReconfigurationRequest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedBuySharesOnBehalfCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedBuySharesOnBehalfCaller(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedVaultCall(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedVaultCall(address,bytes4,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewFund(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewFund(address,string,address,uint256,bytes,bytes)"(
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      _feeManagerConfigData: BytesLike,
      _policyManagerConfigData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getComptrollerLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getComptrollerLib()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVaultLib()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasReconfigurationRequest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasReconfigurationRequest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedBuySharesOnBehalfCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedBuySharesOnBehalfCaller(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedVaultCall(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedVaultCall(address,bytes4,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
