/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreateEnzymeFundInterface extends ethers.utils.Interface {
  functions: {
    "createNewFund(address,address,string,address,uint256)": FunctionFragment;
    "test(uint256,string)": FunctionFragment;
    "test2()": FunctionFragment;
    "test3()": FunctionFragment;
    "test4()": FunctionFragment;
    "test5()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewFund",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "test2", values?: undefined): string;
  encodeFunctionData(functionFragment: "test3", values?: undefined): string;
  encodeFunctionData(functionFragment: "test4", values?: undefined): string;
  encodeFunctionData(functionFragment: "test5", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createNewFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test5", data: BytesLike): Result;

  events: {};
}

export class CreateEnzymeFund extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreateEnzymeFundInterface;

  functions: {
    createNewFund(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewFund(address,address,string,address,uint256)"(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test(
      a: BigNumberish,
      b: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "test(uint256,string)"(
      a: BigNumberish,
      b: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test2(overrides?: Overrides): Promise<ContractTransaction>;

    "test2()"(overrides?: Overrides): Promise<ContractTransaction>;

    test3(overrides?: Overrides): Promise<ContractTransaction>;

    "test3()"(overrides?: Overrides): Promise<ContractTransaction>;

    test4(overrides?: Overrides): Promise<ContractTransaction>;

    "test4()"(overrides?: Overrides): Promise<ContractTransaction>;

    test5(overrides?: Overrides): Promise<ContractTransaction>;

    "test5()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  createNewFund(
    lPAddressProvider: string,
    _fundOwner: string,
    _fundName: string,
    _denominationAsset: string,
    _sharesActionTimelock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewFund(address,address,string,address,uint256)"(
    lPAddressProvider: string,
    _fundOwner: string,
    _fundName: string,
    _denominationAsset: string,
    _sharesActionTimelock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test(
    a: BigNumberish,
    b: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "test(uint256,string)"(
    a: BigNumberish,
    b: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test2(overrides?: Overrides): Promise<ContractTransaction>;

  "test2()"(overrides?: Overrides): Promise<ContractTransaction>;

  test3(overrides?: Overrides): Promise<ContractTransaction>;

  "test3()"(overrides?: Overrides): Promise<ContractTransaction>;

  test4(overrides?: Overrides): Promise<ContractTransaction>;

  "test4()"(overrides?: Overrides): Promise<ContractTransaction>;

  test5(overrides?: Overrides): Promise<ContractTransaction>;

  "test5()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    createNewFund(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "createNewFund(address,address,string,address,uint256)"(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    test(
      a: BigNumberish,
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    "test(uint256,string)"(
      a: BigNumberish,
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    test2(overrides?: CallOverrides): Promise<void>;

    "test2()"(overrides?: CallOverrides): Promise<void>;

    test3(overrides?: CallOverrides): Promise<void>;

    "test3()"(overrides?: CallOverrides): Promise<void>;

    test4(overrides?: CallOverrides): Promise<void>;

    "test4()"(overrides?: CallOverrides): Promise<void>;

    test5(overrides?: CallOverrides): Promise<void>;

    "test5()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createNewFund(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewFund(address,address,string,address,uint256)"(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    test(a: BigNumberish, b: string, overrides?: Overrides): Promise<BigNumber>;

    "test(uint256,string)"(
      a: BigNumberish,
      b: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    test2(overrides?: Overrides): Promise<BigNumber>;

    "test2()"(overrides?: Overrides): Promise<BigNumber>;

    test3(overrides?: Overrides): Promise<BigNumber>;

    "test3()"(overrides?: Overrides): Promise<BigNumber>;

    test4(overrides?: Overrides): Promise<BigNumber>;

    "test4()"(overrides?: Overrides): Promise<BigNumber>;

    test5(overrides?: Overrides): Promise<BigNumber>;

    "test5()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewFund(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewFund(address,address,string,address,uint256)"(
      lPAddressProvider: string,
      _fundOwner: string,
      _fundName: string,
      _denominationAsset: string,
      _sharesActionTimelock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test(
      a: BigNumberish,
      b: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "test(uint256,string)"(
      a: BigNumberish,
      b: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test2(overrides?: Overrides): Promise<PopulatedTransaction>;

    "test2()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    test3(overrides?: Overrides): Promise<PopulatedTransaction>;

    "test3()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    test4(overrides?: Overrides): Promise<PopulatedTransaction>;

    "test4()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    test5(overrides?: Overrides): Promise<PopulatedTransaction>;

    "test5()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
