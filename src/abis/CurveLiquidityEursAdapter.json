{
  "address": "0xAe9Ed85dE2670e3112590a2BB17b7283ddF44d9c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityGaugeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eursToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seurToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveEursLiquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerCrvToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEursToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "eursToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityGaugeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidityGaugeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSeurToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "seurToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "lendAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForAction",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "unstakeAndRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa0953ffac1dacf681b92c09c30c85978215c102e925cb96d85bbec64a1eeede",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xAe9Ed85dE2670e3112590a2BB17b7283ddF44d9c",
    "transactionIndex": 0,
    "gasUsed": "2706989",
    "logsBloom": "0x
    "blockHash": "0xb1f7aabecb5c776a829c48c7c5d2156f78e5d9fadda32de43d66aa38bd731ea5",
    "transactionHash": "0xaa0953ffac1dacf681b92c09c30c85978215c102e925cb96d85bbec64a1eeede",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14302192,
        "transactionHash": "0xaa0953ffac1dacf681b92c09c30c85978215c102e925cb96d85bbec64a1eeede",
        "address": "0xdB25f211AB05b1c97D595516F45794528a807ad8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ae9ed85de2670e3112590a2bb17b7283ddf44d9c",
          "0x0000000000000000000000000ce6a5ff5217e38315f87032cf90686c96627caa"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xb1f7aabecb5c776a829c48c7c5d2156f78e5d9fadda32de43d66aa38bd731ea5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14302192,
        "transactionHash": "0xaa0953ffac1dacf681b92c09c30c85978215c102e925cb96d85bbec64a1eeede",
        "address": "0xD71eCFF9342A5Ced620049e616c5035F1dB98620",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ae9ed85de2670e3112590a2bb17b7283ddf44d9c",
          "0x0000000000000000000000000ce6a5ff5217e38315f87032cf90686c96627caa"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xb1f7aabecb5c776a829c48c7c5d2156f78e5d9fadda32de43d66aa38bd731ea5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14302192,
        "transactionHash": "0xaa0953ffac1dacf681b92c09c30c85978215c102e925cb96d85bbec64a1eeede",
        "address": "0x194eBd173F6cDacE046C53eACcE9B953F28411d1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ae9ed85de2670e3112590a2bb17b7283ddf44d9c",
          "0x00000000000000000000000090bb609649e0451e5ad952683d64bd2d1f245840"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xb1f7aabecb5c776a829c48c7c5d2156f78e5d9fadda32de43d66aa38bd731ea5"
      }
    ],
    "blockNumber": 14302192,
    "cumulativeGasUsed": "2706989",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbe18A1B61ceaF59aEB6A9bC81AB4FB87D56Ba167",
    "0x90Bb609649E0451E5aD952683D64BD2d1f245840",
    "0x194eBd173F6cDacE046C53eACcE9B953F28411d1",
    "0xd061D61a4d941c39E5453435B6345Dc261C2fcE0",
    "0x0Ce6a5fF5217e38315f87032CF90686C96627CAA",
    "0xd533a949740bb3306d119cc777fa900ba034cd52",
    "0xdb25f211ab05b1c97d595516f45794528a807ad8",
    "0xd71ecff9342a5ced620049e616c5035f1db98620"
  ],
  "linkedData": {
    "nonSlippageAdapter": true,
    "type": "ADAPTER"
  },
  "solcInputHash": "6300c217c5a1b06b93196df95db7c1d5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityGaugeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eursToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seurToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveEursLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerCrvToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEursToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"eursToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityGaugeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityGaugeToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeurToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seurToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Rewards tokens are not included as spend assets or incoming assets for claimRewards() Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getCurveEursLiquidityPool()\":{\"returns\":{\"pool_\":\"The `CURVE_EURS_LIQUIDITY_POOL` variable value\"}},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"returns\":{\"crvToken_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\"}},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"returns\":{\"minter_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\"}},\"getEursToken()\":{\"returns\":{\"eursToken_\":\"The `EURS_TOKEN` variable value\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getLiquidityGaugeToken()\":{\"returns\":{\"liquidityGaugeToken_\":\"The `LIQUIDITY_GAUGE_TOKEN` variable value\"}},\"getLpToken()\":{\"returns\":{\"lpToken_\":\"The `LP_TOKEN` variable value\"}},\"getSeurToken()\":{\"returns\":{\"seurToken_\":\"The `SEUR_TOKEN` variable value\"}},\"lend(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"lendAndStake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForAction(address,bytes4,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"redeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"stake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstakeAndRedeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"CurveLiquidityEursAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims rewards from the Curve Minter as well as pool-specific rewards\"},\"getCurveEursLiquidityPool()\":{\"notice\":\"Gets the `CURVE_EURS_LIQUIDITY_POOL` variable\"},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\"},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\"},\"getEursToken()\":{\"notice\":\"Gets the `EURS_TOKEN` variable\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getLiquidityGaugeToken()\":{\"notice\":\"Gets the `LIQUIDITY_GAUGE_TOKEN` variable\"},\"getLpToken()\":{\"notice\":\"Gets the `LP_TOKEN` variable\"},\"getSeurToken()\":{\"notice\":\"Gets the `SEUR_TOKEN` variable\"},\"lend(address,bytes,bytes)\":{\"notice\":\"Lends assets for eurs LP tokens\"},\"lendAndStake(address,bytes,bytes)\":{\"notice\":\"Lends assets for eurs LP tokens, then stakes the received LP tokens\"},\"parseAssetsForAction(address,bytes4,bytes)\":{\"notice\":\"Parses the expected assets in a particular action\"},\"redeem(address,bytes,bytes)\":{\"notice\":\"Redeems eurs LP tokens\"},\"stake(address,bytes,bytes)\":{\"notice\":\"Stakes eurs LP tokens\"},\"unstake(address,bytes,bytes)\":{\"notice\":\"Unstakes eurs LP tokens\"},\"unstakeAndRedeem(address,bytes,bytes)\":{\"notice\":\"Unstakes eurs LP tokens, then redeems them\"}},\"notice\":\"Adapter for liquidity provision in Curve's eurs pool (https://www.curve.fi/eurs)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityEursAdapter.sol\":\"CurveLiquidityEursAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer}\\n}\\n\",\"keccak256\":\"0x858506b4374948c01124d37df17fe4d1902631c752fd29afb65f82e36356072a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function parseAssetsForAction(\\n        address _vaultProxy,\\n        bytes4 _selector,\\n        bytes calldata _encodedCallArgs\\n    )\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x14b11777e21aceca340931832874342546731493bb169dbb4de736b16e9a7cc1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityEursAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/actions/CurveGaugeV2RewardsHandlerBase.sol\\\";\\nimport \\\"../utils/actions/CurveEursLiquidityActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase.sol\\\";\\n\\n/// @title CurveLiquidityEursAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for liquidity provision in Curve's eurs pool (https://www.curve.fi/eurs)\\n/// @dev Rewards tokens are not included as spend assets or incoming assets for claimRewards()\\n/// Rationale:\\n/// - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need\\n/// to enforce policy management or emit an event\\n/// - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\\ncontract CurveLiquidityEursAdapter is\\n    AdapterBase,\\n    CurveGaugeV2RewardsHandlerBase,\\n    CurveEursLiquidityActionsMixin\\n{\\n    address private immutable EURS_TOKEN;\\n    address private immutable LIQUIDITY_GAUGE_TOKEN;\\n    address private immutable LP_TOKEN;\\n    address private immutable SEUR_TOKEN;\\n\\n    constructor(\\n        address _integrationManager,\\n        address _liquidityGaugeToken,\\n        address _lpToken,\\n        address _minter,\\n        address _pool,\\n        address _crvToken,\\n        address _eursToken,\\n        address _seurToken\\n    )\\n        public\\n        AdapterBase(_integrationManager)\\n        CurveGaugeV2RewardsHandlerBase(_minter, _crvToken)\\n        CurveEursLiquidityActionsMixin(_pool, _eursToken, _seurToken)\\n    {\\n        EURS_TOKEN = _eursToken;\\n        LIQUIDITY_GAUGE_TOKEN = _liquidityGaugeToken;\\n        LP_TOKEN = _lpToken;\\n        SEUR_TOKEN = _seurToken;\\n\\n        // Max approve contracts to spend relevant tokens\\n        ERC20(_lpToken).safeApprove(_liquidityGaugeToken, type(uint256).max);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Claims rewards from the Curve Minter as well as pool-specific rewards\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        __curveGaugeV2ClaimAllRewards(getLiquidityGaugeToken(), _vaultProxy);\\n    }\\n\\n    /// @notice Lends assets for eurs LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingEursAmount,\\n            uint256 outgoingSeurAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        __curveEursLend(\\n            outgoingEursAmount,\\n            outgoingSeurAmount,\\n            minIncomingLiquidityGaugeTokenAmount\\n        );\\n    }\\n\\n    /// @notice Lends assets for eurs LP tokens, then stakes the received LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function lendAndStake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingEursAmount,\\n            uint256 outgoingSeurAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        __curveEursLend(\\n            outgoingEursAmount,\\n            outgoingSeurAmount,\\n            minIncomingLiquidityGaugeTokenAmount\\n        );\\n        __curveGaugeV2Stake(\\n            getLiquidityGaugeToken(),\\n            getLpToken(),\\n            ERC20(getLpToken()).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Redeems eurs LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256 minIncomingEursAmount,\\n            uint256 minIncomingSeurAmount,\\n            bool redeemSingleAsset\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        __curveEursRedeem(\\n            outgoingLpTokenAmount,\\n            minIncomingEursAmount,\\n            minIncomingSeurAmount,\\n            redeemSingleAsset\\n        );\\n    }\\n\\n    /// @notice Stakes eurs LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function stake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        __curveGaugeV2Stake(\\n            getLiquidityGaugeToken(),\\n            getLpToken(),\\n            __decodeStakeCallArgs(_actionData)\\n        );\\n    }\\n\\n    /// @notice Unstakes eurs LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function unstake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        __curveGaugeV2Unstake(getLiquidityGaugeToken(), __decodeUnstakeCallArgs(_actionData));\\n    }\\n\\n    /// @notice Unstakes eurs LP tokens, then redeems them\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function unstakeAndRedeem(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256 minIncomingEursAmount,\\n            uint256 minIncomingSeurAmount,\\n            bool redeemSingleAsset\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        __curveGaugeV2Unstake(getLiquidityGaugeToken(), outgoingLiquidityGaugeTokenAmount);\\n        __curveEursRedeem(\\n            outgoingLiquidityGaugeTokenAmount,\\n            minIncomingEursAmount,\\n            minIncomingSeurAmount,\\n            redeemSingleAsset\\n        );\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets in a particular action\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _actionData Data specific to this action\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForAction(\\n        address,\\n        bytes4 _selector,\\n        bytes calldata _actionData\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards();\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_actionData);\\n        } else if (_selector == LEND_AND_STAKE_SELECTOR) {\\n            return __parseAssetsForLendAndStake(_actionData);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_actionData);\\n        } else if (_selector == STAKE_SELECTOR) {\\n            return __parseAssetsForStake(_actionData);\\n        } else if (_selector == UNSTAKE_SELECTOR) {\\n            return __parseAssetsForUnstake(_actionData);\\n        } else if (_selector == UNSTAKE_AND_REDEEM_SELECTOR) {\\n            return __parseAssetsForUnstakeAndRedeem(_actionData);\\n        }\\n\\n        revert(\\\"parseAssetsForAction: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls.\\n    /// No action required, all values empty.\\n    function __parseAssetsForClaimRewards()\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingEursAmount,\\n            uint256 outgoingSeurAmount,\\n            uint256 minIncomingLpTokenAmount\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            outgoingEursAmount,\\n            outgoingSeurAmount\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = getLpToken();\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lendAndStake() calls\\n    function __parseAssetsForLendAndStake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingEursAmount,\\n            uint256 outgoingSeurAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            outgoingEursAmount,\\n            outgoingSeurAmount\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = getLiquidityGaugeToken();\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256 minIncomingEursAmount,\\n            uint256 minIncomingSeurAmount,\\n            bool receiveSingleAsset\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = getLpToken();\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            minIncomingEursAmount,\\n            minIncomingSeurAmount,\\n            receiveSingleAsset\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during stake() calls\\n    function __parseAssetsForStake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLpTokenAmount = __decodeStakeCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = getLpToken();\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = getLiquidityGaugeToken();\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstake() calls\\n    function __parseAssetsForUnstake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = getLiquidityGaugeToken();\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = getLpToken();\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstakeAndRedeem() calls\\n    function __parseAssetsForUnstakeAndRedeem(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256 minIncomingEursAmount,\\n            uint256 minIncomingSeurAmount,\\n            bool receiveSingleAsset\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = getLiquidityGaugeToken();\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            minIncomingEursAmount,\\n            minIncomingSeurAmount,\\n            receiveSingleAsset\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend assets for redeem() and unstakeAndRedeem() calls\\n    function __parseIncomingAssetsForRedemptionCalls(\\n        uint256 _minIncomingEursAmount,\\n        uint256 _minIncomingSeurAmount,\\n        bool _receiveSingleAsset\\n    )\\n        private\\n        view\\n        returns (address[] memory incomingAssets_, uint256[] memory minIncomingAssetAmounts_)\\n    {\\n        if (_receiveSingleAsset) {\\n            incomingAssets_ = new address[](1);\\n            minIncomingAssetAmounts_ = new uint256[](1);\\n\\n            if (_minIncomingEursAmount == 0) {\\n                require(\\n                    _minIncomingSeurAmount > 0,\\n                    \\\"__parseIncomingAssetsForRedemptionCalls: No min asset amount specified\\\"\\n                );\\n                incomingAssets_[0] = getSeurToken();\\n                minIncomingAssetAmounts_[0] = _minIncomingSeurAmount;\\n            } else {\\n                require(\\n                    _minIncomingSeurAmount == 0,\\n                    \\\"__parseIncomingAssetsForRedemptionCalls: Too many min asset amounts specified\\\"\\n                );\\n                incomingAssets_[0] = getEursToken();\\n                minIncomingAssetAmounts_[0] = _minIncomingEursAmount;\\n            }\\n        } else {\\n            incomingAssets_ = new address[](2);\\n            incomingAssets_[0] = getEursToken();\\n            incomingAssets_[1] = getSeurToken();\\n\\n            minIncomingAssetAmounts_ = new uint256[](2);\\n            minIncomingAssetAmounts_[0] = _minIncomingEursAmount;\\n            minIncomingAssetAmounts_[1] = _minIncomingSeurAmount;\\n        }\\n\\n        return (incomingAssets_, minIncomingAssetAmounts_);\\n    }\\n\\n    /// @dev Helper function to parse spend assets for lend() and lendAndStake() calls\\n    function __parseSpendAssetsForLendingCalls(\\n        uint256 _outgoingEursAmount,\\n        uint256 _outgoingSeurAmount\\n    ) private view returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_) {\\n        if (_outgoingEursAmount > 0 && _outgoingSeurAmount > 0) {\\n            spendAssets_ = new address[](2);\\n            spendAssets_[0] = getEursToken();\\n            spendAssets_[1] = getSeurToken();\\n\\n            spendAssetAmounts_ = new uint256[](2);\\n            spendAssetAmounts_[0] = _outgoingEursAmount;\\n            spendAssetAmounts_[1] = _outgoingSeurAmount;\\n        } else if (_outgoingEursAmount > 0) {\\n            spendAssets_ = new address[](1);\\n            spendAssets_[0] = getEursToken();\\n\\n            spendAssetAmounts_ = new uint256[](1);\\n            spendAssetAmounts_[0] = _outgoingEursAmount;\\n        } else {\\n            spendAssets_ = new address[](1);\\n            spendAssets_[0] = getSeurToken();\\n\\n            spendAssetAmounts_ = new uint256[](1);\\n            spendAssetAmounts_[0] = _outgoingSeurAmount;\\n        }\\n\\n        return (spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode the encoded call arguments for lending\\n    function __decodeLendCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingEursAmount_,\\n            uint256 outgoingSeurAmount_,\\n            uint256 minIncomingAssetAmount_\\n        )\\n    {\\n        return abi.decode(_actionData, (uint256, uint256, uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for redeeming.\\n    /// If `receiveSingleAsset_` is `true`, then one (and only one) of\\n    /// `minIncomingEursAmount_` and `minIncomingSeurAmount_` must be >0\\n    /// to indicate which asset is to be received.\\n    function __decodeRedeemCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingAssetAmount_,\\n            uint256 minIncomingEursAmount_,\\n            uint256 minIncomingSeurAmount_,\\n            bool receiveSingleAsset_\\n        )\\n    {\\n        return abi.decode(_actionData, (uint256, uint256, uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for staking\\n    function __decodeStakeCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (uint256 outgoingLpTokenAmount_)\\n    {\\n        return abi.decode(_actionData, (uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for unstaking\\n    function __decodeUnstakeCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (uint256 outgoingLiquidityGaugeTokenAmount_)\\n    {\\n        return abi.decode(_actionData, (uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `EURS_TOKEN` variable\\n    /// @return eursToken_ The `EURS_TOKEN` variable value\\n    function getEursToken() public view returns (address eursToken_) {\\n        return EURS_TOKEN;\\n    }\\n\\n    /// @notice Gets the `LIQUIDITY_GAUGE_TOKEN` variable\\n    /// @return liquidityGaugeToken_ The `LIQUIDITY_GAUGE_TOKEN` variable value\\n    function getLiquidityGaugeToken() public view returns (address liquidityGaugeToken_) {\\n        return LIQUIDITY_GAUGE_TOKEN;\\n    }\\n\\n    /// @notice Gets the `LP_TOKEN` variable\\n    /// @return lpToken_ The `LP_TOKEN` variable value\\n    function getLpToken() public view returns (address lpToken_) {\\n        return LP_TOKEN;\\n    }\\n\\n    /// @notice Gets the `SEUR_TOKEN` variable\\n    /// @return seurToken_ The `SEUR_TOKEN` variable value\\n    function getSeurToken() public view returns (address seurToken_) {\\n        return SEUR_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0xf2237f75184e8899a4feef5f72c2926545e38c5896712ee6c74f5e6dd8ac3707\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../utils/AssetHelpers.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors, AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _assetData\\n    ) {\\n        _;\\n\\n        (, , address[] memory incomingAssets) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\\n        _;\\n\\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to decode the _assetData param passed to adapter call\\n    function __decodeAssetData(bytes memory _assetData)\\n        internal\\n        pure\\n        returns (\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return abi.decode(_assetData, (address[], uint256[], address[]));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x154cf5c2025f1c500bbfcbd4a8a6ed467d5e7f79f8625b56895b14cb6b176164\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0x46d92f56468d868acc2a6f78e80024edfcaf03d09625644c666ce1ab5603c34c\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveEursLiquidityActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../../interfaces/ICurveStableSwapEurs.sol\\\";\\n\\n/// @title CurveEursLiquidityActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with the Curve eurs pool's liquidity functions\\n/// @dev Inheriting contract must have a receive() function\\nabstract contract CurveEursLiquidityActionsMixin {\\n    using SafeERC20 for ERC20;\\n\\n    int128 private constant CURVE_EURS_POOL_INDEX_EURS = 0;\\n    int128 private constant CURVE_EURS_POOL_INDEX_SEUR = 1;\\n\\n    address private immutable CURVE_EURS_LIQUIDITY_POOL;\\n\\n    constructor(\\n        address _pool,\\n        address _eursToken,\\n        address _seurToken\\n    ) public {\\n        CURVE_EURS_LIQUIDITY_POOL = _pool;\\n\\n        // Pre-approve pool to use max of both tokens\\n        ERC20(_eursToken).safeApprove(_pool, type(uint256).max);\\n        ERC20(_seurToken).safeApprove(_pool, type(uint256).max);\\n    }\\n\\n    /// @dev Helper to add liquidity to the pool\\n    function __curveEursLend(\\n        uint256 _outgoingEursAmount,\\n        uint256 _outgoingSeurAmount,\\n        uint256 _minIncomingLPTokenAmount\\n    ) internal {\\n        ICurveStableSwapEurs(CURVE_EURS_LIQUIDITY_POOL).add_liquidity(\\n            [_outgoingEursAmount, _outgoingSeurAmount],\\n            _minIncomingLPTokenAmount\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity from the pool.\\n    // Assumes that if _redeemSingleAsset is true, then\\n    // \\\"_minIncomingEursAmount > 0 XOR _minIncomingSeurAmount > 0\\\" has already been validated.\\n    function __curveEursRedeem(\\n        uint256 _outgoingLPTokenAmount,\\n        uint256 _minIncomingEursAmount,\\n        uint256 _minIncomingSeurAmount,\\n        bool _redeemSingleAsset\\n    ) internal {\\n        if (_redeemSingleAsset) {\\n            if (_minIncomingEursAmount > 0) {\\n                ICurveStableSwapEurs(CURVE_EURS_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                    _outgoingLPTokenAmount,\\n                    CURVE_EURS_POOL_INDEX_EURS,\\n                    _minIncomingEursAmount\\n                );\\n            } else {\\n                ICurveStableSwapEurs(CURVE_EURS_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                    _outgoingLPTokenAmount,\\n                    CURVE_EURS_POOL_INDEX_SEUR,\\n                    _minIncomingSeurAmount\\n                );\\n            }\\n        } else {\\n            ICurveStableSwapEurs(CURVE_EURS_LIQUIDITY_POOL).remove_liquidity(\\n                _outgoingLPTokenAmount,\\n                [_minIncomingEursAmount, _minIncomingSeurAmount]\\n            );\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_EURS_LIQUIDITY_POOL` variable\\n    /// @return pool_ The `CURVE_EURS_LIQUIDITY_POOL` variable value\\n    function getCurveEursLiquidityPool() public view returns (address pool_) {\\n        return CURVE_EURS_LIQUIDITY_POOL;\\n    }\\n}\\n\",\"keccak256\":\"0x1f652d40d4cee8678351ef823176262be500d3b71e4c4c1992adc9ed7f98c0ac\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveLiquidityGaugeV2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title CurveGaugeV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with any Curve LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2ActionsMixin is AssetHelpers {\\n    uint256 private constant CURVE_GAUGE_V2_MAX_REWARDS = 8;\\n\\n    /// @dev Helper to claim pool-specific rewards\\n    function __curveGaugeV2ClaimRewards(address _gauge, address _target) internal {\\n        ICurveLiquidityGaugeV2(_gauge).claim_rewards(_target);\\n    }\\n\\n    /// @dev Helper to get list of pool-specific rewards tokens\\n    function __curveGaugeV2GetRewardsTokens(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        address[] memory lpRewardsTokensWithEmpties = new address[](CURVE_GAUGE_V2_MAX_REWARDS);\\n        uint256 rewardsTokensCount;\\n        for (uint256 i; i < CURVE_GAUGE_V2_MAX_REWARDS; i++) {\\n            address rewardToken = ICurveLiquidityGaugeV2(_gauge).reward_tokens(i);\\n            if (rewardToken != address(0)) {\\n                lpRewardsTokensWithEmpties[i] = rewardToken;\\n                rewardsTokensCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        rewardsTokens_ = new address[](rewardsTokensCount);\\n        for (uint256 i; i < rewardsTokensCount; i++) {\\n            rewardsTokens_[i] = lpRewardsTokensWithEmpties[i];\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to stake LP tokens\\n    function __curveGaugeV2Stake(\\n        address _gauge,\\n        address _lpToken,\\n        uint256 _amount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_lpToken, _gauge, _amount);\\n        ICurveLiquidityGaugeV2(_gauge).deposit(_amount, address(this));\\n    }\\n\\n    /// @dev Helper to unstake LP tokens\\n    function __curveGaugeV2Unstake(address _gauge, uint256 _amount) internal {\\n        ICurveLiquidityGaugeV2(_gauge).withdraw(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb297d967916d8560814b5d85ca8abedacf7d3c414390a0eb1179aa3adaa9be1b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2RewardsHandlerBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveMinter.sol\\\";\\nimport \\\"../../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"./CurveGaugeV2ActionsMixin.sol\\\";\\n\\n/// @title CurveGaugeV2RewardsHandlerBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base contract for handling claiming and reinvesting rewards for a Curve pool\\n/// that uses the LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2RewardsHandlerBase is CurveGaugeV2ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n\\n    constructor(address _minter, address _crvToken) public {\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN = _crvToken;\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER = _minter;\\n    }\\n\\n    /// @dev Helper to claim all rewards (CRV and pool-specific).\\n    /// Requires contract to be approved to use mint_for().\\n    function __curveGaugeV2ClaimAllRewards(address _gauge, address _target) internal {\\n        // Claim owed $CRV\\n        ICurveMinter(CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER).mint_for(_gauge, _target);\\n\\n        // Claim owed pool-specific rewards\\n        __curveGaugeV2ClaimRewards(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for staking LP tokens\\n    function __curveGaugeV2GetRewardsTokensWithCrv(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        return\\n            __curveGaugeV2GetRewardsTokens(_gauge).addUniqueItem(\\n                CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN\\n            );\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\\n    /// @return crvToken_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\\n    function getCurveGaugeV2RewardsHandlerCrvToken() public view returns (address crvToken_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    }\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\\n    /// @return minter_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\\n    function getCurveGaugeV2RewardsHandlerMinter() public view returns (address minter_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n    }\\n}\\n\",\"keccak256\":\"0x5567593fc3b76c4afb04d63ed9e08fb3761e15a71a8a6550ba4d98ec69c10053\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveLiquidityGaugeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityGaugeV2 interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveLiquidityGaugeV2 {\\n    function claim_rewards(address) external;\\n\\n    function deposit(uint256, address) external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0fbd9bdd7d7df1cd92c065ae3e62f1767d80914f086a0f146a2c9874aa7d4e30\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveMinter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveMinter {\\n    function mint_for(address, address) external;\\n}\\n\",\"keccak256\":\"0xbfe0cfa932805d9cda714d7ef7cb6b42d08c782b0ffa46de5e2c0530f4ce5ba1\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveStableSwapEurs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveStableSwapEurs interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveStableSwapEurs {\\n    function add_liquidity(uint256[2] calldata, uint256) external returns (uint256);\\n\\n    function remove_liquidity(uint256, uint256[2] calldata) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_one_coin(\\n        uint256,\\n        int128,\\n        uint256\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ae6e4b711aac30f1eca3c20a4ab69e1e42279581f4a7765e772f1cd5b3ac986\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x23809cb635aee1cd1aad36952627ce55739cf0bea3408819a0eddee2932936e7\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0xe52543e0c2ac52e6ce6bbe60aa91b7b72aff3a9682d312ce83743ee0bb7d304d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620033f8380380620033f883398181016040526101008110156200003957600080fd5b508051602080830151604084015160608086015160808088015160a0808a015160c0808c015160e09c8d01516001600160601b03198d8a1b811690975283891b871690945286881b86169091529583901b9093169099529697949693959194909291849083908390620000c6906001600160a01b038416908590600019906200142862000152821b17901c565b620000ed83600019836001600160a01b03166200015260201b62001428179092919060201c565b505050606082811b6001600160601b03199081166101005288821b81166101205287821b8116610140529082901b1661016052620001446001600160a01b0387168860001962000152602090811b6200142817901c565b505050505050505062000565565b801580620001dc575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620001ac57600080fd5b505afa158015620001c1573d6000803e3d6000fd5b505050506040513d6020811015620001d857600080fd5b5051155b620002195760405162461bcd60e51b8152600401808060200182810382526036815260200180620033c26036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002719185916200027616565b505050565b6060620002d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200033260201b62001540179092919060201c565b8051909150156200027157808060200190516020811015620002f357600080fd5b5051620002715760405162461bcd60e51b815260040180806020018281038252602a81526020018062003398602a913960400191505060405180910390fd5b60606200034384846000856200034d565b90505b9392505050565b606082471015620003905760405162461bcd60e51b8152600401808060200182810382526026815260200180620033726026913960400191505060405180910390fd5b6200039b85620004b5565b620003ed576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106200042e5780518252601f1990920191602091820191016200040d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000492576040519150601f19603f3d011682016040523d82523d6000602084013e62000497565b606091505b509092509050620004aa828286620004bb565b979650505050505050565b3b151590565b60608315620004cc57508162000346565b825115620004dd5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005295781810151838201526020016200050f565b50505050905090810190601f168015620005575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c612d5b6200061760003980610fbe525080610e3c525080610e18525080610adf525080610f9a528061158f5280611ab85280611b915280611c0d5250806112ea5280611cf2525080610cb15250806109ab5280610b305280610d265280610e69528061100f528061108e52806112c6528061133b5250612d5b6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638334eb99116100c3578063c29fa9dd1161007c578063c29fa9dd14610606578063c54efee5146106d4578063e7c4569014610896578063f003eb851461089e578063f7d882b5146108a6578063fa7dd04d146108ae57610158565b80638334eb991461044a578063863e5ad014610518578063a1c52b1c14610520578063a9fad30a14610528578063b23228cf14610530578063b9dfbacc1461053857610158565b8063332d709f11610115578063332d709f146103545780633ffc15911461035c57806340da225d1461036457806368e306771461036c5780637240b2251461043a5780638214f5a41461044257610158565b8063080456c11461015d578063099f751514610182578063131461c0146102525780631f0a882f1461025a578063257cb1a31461027e57806329fa046e14610286575b600080fd5b61016561097c565b604080516001600160e01b03199092168252519081900360200190f35b6102506004803603606081101561019857600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460018302840111600160201b831117156101f557600080fd5b919390929091602081019035600160201b81111561021257600080fd5b82018360208201111561022457600080fd5b803590602001918460018302840111600160201b8311171561024557600080fd5b5090925090506109a0565b005b610165610ab9565b610262610add565b604080516001600160a01b039092168252519081900360200190f35b610165610b01565b6102506004803603606081101561029c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102c657600080fd5b8201836020820111156102d857600080fd5b803590602001918460018302840111600160201b831117156102f957600080fd5b919390929091602081019035600160201b81111561031657600080fd5b82018360208201111561032857600080fd5b803590602001918460018302840111600160201b8311171561034957600080fd5b509092509050610b25565b610262610caf565b610165610cd3565b610165610cf7565b6102506004803603606081101561038257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103ac57600080fd5b8201836020820111156103be57600080fd5b803590602001918460018302840111600160201b831117156103df57600080fd5b919390929091602081019035600160201b8111156103fc57600080fd5b82018360208201111561040e57600080fd5b803590602001918460018302840111600160201b8311171561042f57600080fd5b509092509050610d1b565b610262610e16565b610262610e3a565b6102506004803603606081101561046057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561048a57600080fd5b82018360208201111561049c57600080fd5b803590602001918460018302840111600160201b831117156104bd57600080fd5b919390929091602081019035600160201b8111156104da57600080fd5b8201836020820111156104ec57600080fd5b803590602001918460018302840111600160201b8311171561050d57600080fd5b509092509050610e5e565b610165610f74565b610262610f98565b610262610fbc565b610165610fe0565b6102506004803603606081101561054e57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561057857600080fd5b82018360208201111561058a57600080fd5b803590602001918460018302840111600160201b831117156105ab57600080fd5b919390929091602081019035600160201b8111156105c857600080fd5b8201836020820111156105da57600080fd5b803590602001918460018302840111600160201b831117156105fb57600080fd5b509092509050611004565b6102506004803603606081101561061c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561064657600080fd5b82018360208201111561065857600080fd5b803590602001918460018302840111600160201b8311171561067957600080fd5b919390929091602081019035600160201b81111561069657600080fd5b8201836020820111156106a857600080fd5b803590602001918460018302840111600160201b831117156106c957600080fd5b509092509050611083565b610761600480360360608110156106ea57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561072357600080fd5b82018360208201111561073557600080fd5b803590602001918460018302840111600160201b8311171561075657600080fd5b509092509050611179565b6040518086600281111561077157fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156107be5781810151838201526020016107a6565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107fd5781810151838201526020016107e5565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561083c578181015183820152602001610824565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561087b578181015183820152602001610863565b50505050905001995050505050505050505060405180910390f35b6102626112c4565b6102626112e8565b61016561130c565b610250600480360360608110156108c457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108ee57600080fd5b82018360208201111561090057600080fd5b803590602001918460018302840111600160201b8311171561092157600080fd5b919390929091602081019035600160201b81111561093e57600080fd5b82018360208201111561095057600080fd5b803590602001918460018302840111600160201b8311171561097157600080fd5b509092509050611330565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a075760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350839250610a8191908b908b908190840183828082843760009201919091525061155992505050565b925092509250610a9283838361158d565b5050506060610aa08261165e565b92505050610aae838261181b565b505050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8c5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350839250610c0691908b908b908190840183828082843760009201919091525061155992505050565b925092509250610c1783838361158d565b610a92610c22610e16565b610c2a610e3a565b610c32610e3a565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b5051611976565b7f000000000000000000000000000000000000000000000000000000000000000090565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d825760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0b9250610dc79150610e169050565b610e0688888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b611a0b565b6060610aa08261165e565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ec55760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291610f40918c908c9081908401838280828437600092019190915250611a6d92505050565b9350935093509350610f59610f53610e16565b85611a0b565b610f6584848484611aaa565b505050506060610aa08261165e565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461106b5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b61107c611076610e16565b86611cf0565b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110ea5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291611165918c908c9081908401838280828437600092019190915250611a6d92505050565b9350935093509350610f6584848484611aaa565b600060608080806001600160e01b03198816632e77eeb360e21b14156111b0576111a1611d96565b945094509450945094506112b9565b6001600160e01b0319881663099f751560e01b14156111d3576111a18787611df6565b6001600160e01b031988166314fd023760e11b14156111f6576111a18787611eed565b6001600160e01b0319881663c29fa9dd60e01b1415611219576111a18787611f76565b6001600160e01b0319881663fa7dd04d60e01b141561123c576111a18787612073565b6001600160e01b031988166368e3067760e01b141561125f576111a187876121d8565b6001600160e01b03198816638334eb9960e01b1415611282576111a187876122d1565b60405162461bcd60e51b8152600401808060200182810382526027815260200180612cff6027913960400191505060405180910390fd5b945094509450945094565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113975760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0b92506113dc9150610e169050565b6113e4610e3a565b61142389898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b611976565b8015806114ae575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d60208110156114aa57600080fd5b5051155b6114e95760405162461bcd60e51b8152600401808060200182810382526036815260200180612cc96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261153b908490612350565b505050565b606061154f8484600085612401565b90505b9392505050565b600080600083806020019051606081101561157357600080fd5b508051602082015160409092015190969195509350915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b4c7e4d604051806040016040528086815260200185815250836040518363ffffffff1660e01b81526004018083600260200280838360005b838110156116095781810151838201526020016115f1565b5050505090500182815260200192505050602060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b606080606083806020019051606081101561167857600080fd5b8101908080516040519392919084600160201b82111561169757600080fd5b9083019060208201858111156116ac57600080fd5b82518660208202830111600160201b821117156116c857600080fd5b82525081516020918201928201910280838360005b838110156116f55781810151838201526020016116dd565b5050505090500160405260200180516040519392919084600160201b82111561171d57600080fd5b90830190602082018581111561173257600080fd5b82518660208202830111600160201b8211171561174e57600080fd5b82525081516020918201928201910280838360005b8381101561177b578181015183820152602001611763565b5050505090500160405260200180516040519392919084600160201b8211156117a357600080fd5b9083019060208201858111156117b857600080fd5b82518660208202830111600160201b821117156117d457600080fd5b82525081516020918201928201910280838360005b838110156118015781810151838201526020016117e9565b505050509050016040525050509250925092509193909250565b6060815167ffffffffffffffff8111801561183557600080fd5b5060405190808252806020026020018201604052801561185f578160200160208202803683370190505b50905060005b825181101561196f57600083828151811061187c57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d60208110156118fd57600080fd5b5051835184908490811061190d57fe5b602002602001018181525050600083838151811061192757fe5b60200260200101511115611966576119668584848151811061194557fe5b6020026020010151836001600160a01b031661255d9092919063ffffffff16565b50600101611865565b5092915050565b6119818284836125af565b60408051636e553f6560e01b81526004810183905230602482015290516001600160a01b03851691636e553f6591604480830192600092919082900301818387803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b50505050505050565b6000818060200190516020811015611a0357600080fd5b505192915050565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b505050505050565b600080600080848060200190516080811015611a8857600080fd5b5080516020820151604083015160609093015191989097509195509350915050565b8015611c0b578215611b62577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631a4d01d2856000866040518463ffffffff1660e01b81526004018084815260200183600f0b81526020018281526020019350505050602060405180830381600087803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505050506040513d6020811015611b5a57600080fd5b50611c069050565b60408051630d2680e960e11b815260048101869052600160248201526044810184905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631a4d01d29160648083019260209291908290030181600087803b158015611bd957600080fd5b505af1158015611bed573d6000803e3d6000fd5b505050506040513d6020811015611c0357600080fd5b50505b611cea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b36389c856040518060400160405280878152602001868152506040518363ffffffff1660e01b81526004018083815260200182600260200280838360005b83811015611c8d578181015183820152602001611c75565b50505050905001925050506040805180830381600087803b158015611cb157600080fd5b505af1158015611cc5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015611a6557600080fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166327f18ae383836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b50505050611d928282612667565b5050565b600060608080808480604051908082528060200260200182016040528015611dc8578160200160208202803683370190505b5060408051600080825260208201818152828401918252606083019093529399929850965094509092509050565b60006060806060806000806000611e428a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b925092509250611e5283836126b6565b60408051600180825281830190925292995090975060208083019080368337019050509450611e7f610e3a565b85600081518110611e8c57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505093508084600081518110611ed057fe5b602002602001018181525050600297505050509295509295909350565b60006060806060806000806000611f398a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b925092509250611f4983836126b6565b60408051600180825281830190925292995090975060208083019080368337019050509450611e7f610e16565b6000606080606080600080600080611fc38b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6d92505050565b604080516001808252818301909252949850929650909450925060208083019080368337019050509750611ff5610e3a565b8860008151811061200257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650838760008151811061204657fe5b60200260200101818152505061205d8383836128b6565b60029d999c50979a509850959695505050505050565b600060608060608060006120bc88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b604080516001808252818301909252919250602080830190803683370190505094506120e6610e3a565b856000815181106120f357fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061213757fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050925061216c610e16565b8360008151811061217957fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080826000815181106121bd57fe5b60200260200101818152505060029550509295509295909350565b6000606080606080600061222188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b6040805160018082528183019092529192506020808301908036833701905050945061224b610e16565b8560008151811061225857fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061229c57fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050925061216c610e3a565b600060608060608060008060008061231e8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6d92505050565b604080516001808252818301909252949850929650909450925060208083019080368337019050509750611ff5610e16565b60606123a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115409092919063ffffffff16565b80519091501561153b578080602001905160208110156123c457600080fd5b505161153b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c9f602a913960400191505060405180910390fd5b6060824710156124425760405162461bcd60e51b8152600401808060200182810382526026815260200180612bb46026913960400191505060405180910390fd5b61244b85612b09565b61249c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124db5780518252601f1990920191602091820191016124bc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461253d576040519150601f19603f3d011682016040523d82523d6000602084013e612542565b606091505b5091509150612552828286612b0f565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261153b908490612350565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561260057600080fd5b505afa158015612614573d6000803e3d6000fd5b505050506040513d602081101561262a57600080fd5b5051905081811015611cea578015612651576126516001600160a01b038516846000611428565b611cea6001600160a01b03851684600019611428565b816001600160a01b03166384e9bd7e826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611a5157600080fd5b6060806000841180156126c95750600083115b156127aa5760408051600280825260608201835290916020830190803683370190505091506126f6610add565b8260008151811061270357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061272b610fbc565b8260018151811061273857fe5b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509050838160008151811061277f57fe5b602002602001018181525050828160018151811061279957fe5b6020026020010181815250506128af565b83156128295760408051600180825281830190925290602080830190803683370190505091506127d8610add565b826000815181106127e557fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050838160008151811061279957fe5b6040805160018082528183019092529060208083019080368337019050509150612851610fbc565b8260008151811061285e57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050905082816000815181106128a257fe5b6020026020010181815250505b9250929050565b6060808215612a2957604080516001808252818301909252906020808301908036833750506040805160018082528183019092529294509050602080830190803683370190505090508461299757600084116129435760405162461bcd60e51b8152600401808060200182810382526046815260200180612c596046913960600191505060405180910390fd5b61294b610fbc565b8260008151811061295857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061298657fe5b602002602001018181525050612a24565b83156129d45760405162461bcd60e51b815260040180806020018281038252604d815260200180612c0c604d913960600191505060405180910390fd5b6129dc610add565b826000815181106129e957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600081518110612a1757fe5b6020026020010181815250505b612b01565b6040805160028082526060820183529091602083019080368337019050509150612a51610add565b82600081518110612a5e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612a86610fbc565b82600181518110612a9357fe5b6001600160a01b03929092166020928302919091018201526040805160028082526060820183529092909190830190803683370190505090508481600081518110612ada57fe5b6020026020010181815250508381600181518110612af457fe5b6020026020010181815250505b935093915050565b3b151590565b60608315612b1e575081611552565b825115612b2e5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b78578181015183820152602001612b60565b50505050905090810190601f168015612ba55780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e5f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a20546f6f206d616e79206d696e20617373657420616d6f756e7473207370656369666965645f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a204e6f206d696e20617373657420616d6f756e74207370656369666965645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63657061727365417373657473466f72416374696f6e3a205f73656c6563746f7220696e76616c6964a26469706673582212200af909910e3185f28d84876235104b0f456c171ab696692038d5d2816786874264736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638334eb99116100c3578063c29fa9dd1161007c578063c29fa9dd14610606578063c54efee5146106d4578063e7c4569014610896578063f003eb851461089e578063f7d882b5146108a6578063fa7dd04d146108ae57610158565b80638334eb991461044a578063863e5ad014610518578063a1c52b1c14610520578063a9fad30a14610528578063b23228cf14610530578063b9dfbacc1461053857610158565b8063332d709f11610115578063332d709f146103545780633ffc15911461035c57806340da225d1461036457806368e306771461036c5780637240b2251461043a5780638214f5a41461044257610158565b8063080456c11461015d578063099f751514610182578063131461c0146102525780631f0a882f1461025a578063257cb1a31461027e57806329fa046e14610286575b600080fd5b61016561097c565b604080516001600160e01b03199092168252519081900360200190f35b6102506004803603606081101561019857600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460018302840111600160201b831117156101f557600080fd5b919390929091602081019035600160201b81111561021257600080fd5b82018360208201111561022457600080fd5b803590602001918460018302840111600160201b8311171561024557600080fd5b5090925090506109a0565b005b610165610ab9565b610262610add565b604080516001600160a01b039092168252519081900360200190f35b610165610b01565b6102506004803603606081101561029c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102c657600080fd5b8201836020820111156102d857600080fd5b803590602001918460018302840111600160201b831117156102f957600080fd5b919390929091602081019035600160201b81111561031657600080fd5b82018360208201111561032857600080fd5b803590602001918460018302840111600160201b8311171561034957600080fd5b509092509050610b25565b610262610caf565b610165610cd3565b610165610cf7565b6102506004803603606081101561038257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103ac57600080fd5b8201836020820111156103be57600080fd5b803590602001918460018302840111600160201b831117156103df57600080fd5b919390929091602081019035600160201b8111156103fc57600080fd5b82018360208201111561040e57600080fd5b803590602001918460018302840111600160201b8311171561042f57600080fd5b509092509050610d1b565b610262610e16565b610262610e3a565b6102506004803603606081101561046057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561048a57600080fd5b82018360208201111561049c57600080fd5b803590602001918460018302840111600160201b831117156104bd57600080fd5b919390929091602081019035600160201b8111156104da57600080fd5b8201836020820111156104ec57600080fd5b803590602001918460018302840111600160201b8311171561050d57600080fd5b509092509050610e5e565b610165610f74565b610262610f98565b610262610fbc565b610165610fe0565b6102506004803603606081101561054e57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561057857600080fd5b82018360208201111561058a57600080fd5b803590602001918460018302840111600160201b831117156105ab57600080fd5b919390929091602081019035600160201b8111156105c857600080fd5b8201836020820111156105da57600080fd5b803590602001918460018302840111600160201b831117156105fb57600080fd5b509092509050611004565b6102506004803603606081101561061c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561064657600080fd5b82018360208201111561065857600080fd5b803590602001918460018302840111600160201b8311171561067957600080fd5b919390929091602081019035600160201b81111561069657600080fd5b8201836020820111156106a857600080fd5b803590602001918460018302840111600160201b831117156106c957600080fd5b509092509050611083565b610761600480360360608110156106ea57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561072357600080fd5b82018360208201111561073557600080fd5b803590602001918460018302840111600160201b8311171561075657600080fd5b509092509050611179565b6040518086600281111561077157fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156107be5781810151838201526020016107a6565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107fd5781810151838201526020016107e5565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561083c578181015183820152602001610824565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561087b578181015183820152602001610863565b50505050905001995050505050505050505060405180910390f35b6102626112c4565b6102626112e8565b61016561130c565b610250600480360360608110156108c457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108ee57600080fd5b82018360208201111561090057600080fd5b803590602001918460018302840111600160201b8311171561092157600080fd5b919390929091602081019035600160201b81111561093e57600080fd5b82018360208201111561095057600080fd5b803590602001918460018302840111600160201b8311171561097157600080fd5b509092509050611330565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a075760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350839250610a8191908b908b908190840183828082843760009201919091525061155992505050565b925092509250610a9283838361158d565b5050506060610aa08261165e565b92505050610aae838261181b565b505050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8c5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350839250610c0691908b908b908190840183828082843760009201919091525061155992505050565b925092509250610c1783838361158d565b610a92610c22610e16565b610c2a610e3a565b610c32610e3a565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b5051611976565b7f000000000000000000000000000000000000000000000000000000000000000090565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d825760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0b9250610dc79150610e169050565b610e0688888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b611a0b565b6060610aa08261165e565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ec55760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291610f40918c908c9081908401838280828437600092019190915250611a6d92505050565b9350935093509350610f59610f53610e16565b85611a0b565b610f6584848484611aaa565b505050506060610aa08261165e565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461106b5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b61107c611076610e16565b86611cf0565b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110ea5760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291611165918c908c9081908401838280828437600092019190915250611a6d92505050565b9350935093509350610f6584848484611aaa565b600060608080806001600160e01b03198816632e77eeb360e21b14156111b0576111a1611d96565b945094509450945094506112b9565b6001600160e01b0319881663099f751560e01b14156111d3576111a18787611df6565b6001600160e01b031988166314fd023760e11b14156111f6576111a18787611eed565b6001600160e01b0319881663c29fa9dd60e01b1415611219576111a18787611f76565b6001600160e01b0319881663fa7dd04d60e01b141561123c576111a18787612073565b6001600160e01b031988166368e3067760e01b141561125f576111a187876121d8565b6001600160e01b03198816638334eb9960e01b1415611282576111a187876122d1565b60405162461bcd60e51b8152600401808060200182810382526027815260200180612cff6027913960400191505060405180910390fd5b945094509450945094565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113975760405162461bcd60e51b8152600401808060200182810382526032815260200180612bda6032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0b92506113dc9150610e169050565b6113e4610e3a565b61142389898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b611976565b8015806114ae575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d60208110156114aa57600080fd5b5051155b6114e95760405162461bcd60e51b8152600401808060200182810382526036815260200180612cc96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261153b908490612350565b505050565b606061154f8484600085612401565b90505b9392505050565b600080600083806020019051606081101561157357600080fd5b508051602082015160409092015190969195509350915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b4c7e4d604051806040016040528086815260200185815250836040518363ffffffff1660e01b81526004018083600260200280838360005b838110156116095781810151838201526020016115f1565b5050505090500182815260200192505050602060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b606080606083806020019051606081101561167857600080fd5b8101908080516040519392919084600160201b82111561169757600080fd5b9083019060208201858111156116ac57600080fd5b82518660208202830111600160201b821117156116c857600080fd5b82525081516020918201928201910280838360005b838110156116f55781810151838201526020016116dd565b5050505090500160405260200180516040519392919084600160201b82111561171d57600080fd5b90830190602082018581111561173257600080fd5b82518660208202830111600160201b8211171561174e57600080fd5b82525081516020918201928201910280838360005b8381101561177b578181015183820152602001611763565b5050505090500160405260200180516040519392919084600160201b8211156117a357600080fd5b9083019060208201858111156117b857600080fd5b82518660208202830111600160201b821117156117d457600080fd5b82525081516020918201928201910280838360005b838110156118015781810151838201526020016117e9565b505050509050016040525050509250925092509193909250565b6060815167ffffffffffffffff8111801561183557600080fd5b5060405190808252806020026020018201604052801561185f578160200160208202803683370190505b50905060005b825181101561196f57600083828151811061187c57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d60208110156118fd57600080fd5b5051835184908490811061190d57fe5b602002602001018181525050600083838151811061192757fe5b60200260200101511115611966576119668584848151811061194557fe5b6020026020010151836001600160a01b031661255d9092919063ffffffff16565b50600101611865565b5092915050565b6119818284836125af565b60408051636e553f6560e01b81526004810183905230602482015290516001600160a01b03851691636e553f6591604480830192600092919082900301818387803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b50505050505050565b6000818060200190516020811015611a0357600080fd5b505192915050565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b505050505050565b600080600080848060200190516080811015611a8857600080fd5b5080516020820151604083015160609093015191989097509195509350915050565b8015611c0b578215611b62577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631a4d01d2856000866040518463ffffffff1660e01b81526004018084815260200183600f0b81526020018281526020019350505050602060405180830381600087803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505050506040513d6020811015611b5a57600080fd5b50611c069050565b60408051630d2680e960e11b815260048101869052600160248201526044810184905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631a4d01d29160648083019260209291908290030181600087803b158015611bd957600080fd5b505af1158015611bed573d6000803e3d6000fd5b505050506040513d6020811015611c0357600080fd5b50505b611cea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b36389c856040518060400160405280878152602001868152506040518363ffffffff1660e01b81526004018083815260200182600260200280838360005b83811015611c8d578181015183820152602001611c75565b50505050905001925050506040805180830381600087803b158015611cb157600080fd5b505af1158015611cc5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015611a6557600080fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166327f18ae383836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b50505050611d928282612667565b5050565b600060608080808480604051908082528060200260200182016040528015611dc8578160200160208202803683370190505b5060408051600080825260208201818152828401918252606083019093529399929850965094509092509050565b60006060806060806000806000611e428a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b925092509250611e5283836126b6565b60408051600180825281830190925292995090975060208083019080368337019050509450611e7f610e3a565b85600081518110611e8c57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505093508084600081518110611ed057fe5b602002602001018181525050600297505050509295509295909350565b60006060806060806000806000611f398a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155992505050565b925092509250611f4983836126b6565b60408051600180825281830190925292995090975060208083019080368337019050509450611e7f610e16565b6000606080606080600080600080611fc38b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6d92505050565b604080516001808252818301909252949850929650909450925060208083019080368337019050509750611ff5610e3a565b8860008151811061200257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650838760008151811061204657fe5b60200260200101818152505061205d8383836128b6565b60029d999c50979a509850959695505050505050565b600060608060608060006120bc88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b604080516001808252818301909252919250602080830190803683370190505094506120e6610e3a565b856000815181106120f357fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061213757fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050925061216c610e16565b8360008151811061217957fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080826000815181106121bd57fe5b60200260200101818152505060029550509295509295909350565b6000606080606080600061222188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ec92505050565b6040805160018082528183019092529192506020808301908036833701905050945061224b610e16565b8560008151811061225857fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061229c57fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050925061216c610e3a565b600060608060608060008060008061231e8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6d92505050565b604080516001808252818301909252949850929650909450925060208083019080368337019050509750611ff5610e16565b60606123a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115409092919063ffffffff16565b80519091501561153b578080602001905160208110156123c457600080fd5b505161153b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c9f602a913960400191505060405180910390fd5b6060824710156124425760405162461bcd60e51b8152600401808060200182810382526026815260200180612bb46026913960400191505060405180910390fd5b61244b85612b09565b61249c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124db5780518252601f1990920191602091820191016124bc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461253d576040519150601f19603f3d011682016040523d82523d6000602084013e612542565b606091505b5091509150612552828286612b0f565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261153b908490612350565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561260057600080fd5b505afa158015612614573d6000803e3d6000fd5b505050506040513d602081101561262a57600080fd5b5051905081811015611cea578015612651576126516001600160a01b038516846000611428565b611cea6001600160a01b03851684600019611428565b816001600160a01b03166384e9bd7e826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611a5157600080fd5b6060806000841180156126c95750600083115b156127aa5760408051600280825260608201835290916020830190803683370190505091506126f6610add565b8260008151811061270357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061272b610fbc565b8260018151811061273857fe5b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509050838160008151811061277f57fe5b602002602001018181525050828160018151811061279957fe5b6020026020010181815250506128af565b83156128295760408051600180825281830190925290602080830190803683370190505091506127d8610add565b826000815181106127e557fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050838160008151811061279957fe5b6040805160018082528183019092529060208083019080368337019050509150612851610fbc565b8260008151811061285e57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050905082816000815181106128a257fe5b6020026020010181815250505b9250929050565b6060808215612a2957604080516001808252818301909252906020808301908036833750506040805160018082528183019092529294509050602080830190803683370190505090508461299757600084116129435760405162461bcd60e51b8152600401808060200182810382526046815260200180612c596046913960600191505060405180910390fd5b61294b610fbc565b8260008151811061295857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061298657fe5b602002602001018181525050612a24565b83156129d45760405162461bcd60e51b815260040180806020018281038252604d815260200180612c0c604d913960600191505060405180910390fd5b6129dc610add565b826000815181106129e957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600081518110612a1757fe5b6020026020010181815250505b612b01565b6040805160028082526060820183529091602083019080368337019050509150612a51610add565b82600081518110612a5e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612a86610fbc565b82600181518110612a9357fe5b6001600160a01b03929092166020928302919091018201526040805160028082526060820183529092909190830190803683370190505090508481600081518110612ada57fe5b6020026020010181815250508381600181518110612af457fe5b6020026020010181815250505b935093915050565b3b151590565b60608315612b1e575081611552565b825115612b2e5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b78578181015183820152602001612b60565b50505050905090810190601f168015612ba55780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e5f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a20546f6f206d616e79206d696e20617373657420616d6f756e7473207370656369666965645f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a204e6f206d696e20617373657420616d6f756e74207370656369666965645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63657061727365417373657473466f72416374696f6e3a205f73656c6563746f7220696e76616c6964a26469706673582212200af909910e3185f28d84876235104b0f456c171ab696692038d5d2816786874264736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Rewards tokens are not included as spend assets or incoming assets for claimRewards() Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, in which case they cannot be tracked",
    "kind": "dev",
    "methods": {
      "claimRewards(address,bytes,bytes)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "getCurveEursLiquidityPool()": {
        "returns": {
          "pool_": "The `CURVE_EURS_LIQUIDITY_POOL` variable value"
        }
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "returns": {
          "crvToken_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value"
        }
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "returns": {
          "minter_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value"
        }
      },
      "getEursToken()": {
        "returns": {
          "eursToken_": "The `EURS_TOKEN` variable value"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getLiquidityGaugeToken()": {
        "returns": {
          "liquidityGaugeToken_": "The `LIQUIDITY_GAUGE_TOKEN` variable value"
        }
      },
      "getLpToken()": {
        "returns": {
          "lpToken_": "The `LP_TOKEN` variable value"
        }
      },
      "getSeurToken()": {
        "returns": {
          "seurToken_": "The `SEUR_TOKEN` variable value"
        }
      },
      "lend(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "lendAndStake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "parseAssetsForAction(address,bytes4,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "redeem(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "stake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "CurveLiquidityEursAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards(address,bytes,bytes)": {
        "notice": "Claims rewards from the Curve Minter as well as pool-specific rewards"
      },
      "getCurveEursLiquidityPool()": {
        "notice": "Gets the `CURVE_EURS_LIQUIDITY_POOL` variable"
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable"
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable"
      },
      "getEursToken()": {
        "notice": "Gets the `EURS_TOKEN` variable"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getLiquidityGaugeToken()": {
        "notice": "Gets the `LIQUIDITY_GAUGE_TOKEN` variable"
      },
      "getLpToken()": {
        "notice": "Gets the `LP_TOKEN` variable"
      },
      "getSeurToken()": {
        "notice": "Gets the `SEUR_TOKEN` variable"
      },
      "lend(address,bytes,bytes)": {
        "notice": "Lends assets for eurs LP tokens"
      },
      "lendAndStake(address,bytes,bytes)": {
        "notice": "Lends assets for eurs LP tokens, then stakes the received LP tokens"
      },
      "parseAssetsForAction(address,bytes4,bytes)": {
        "notice": "Parses the expected assets in a particular action"
      },
      "redeem(address,bytes,bytes)": {
        "notice": "Redeems eurs LP tokens"
      },
      "stake(address,bytes,bytes)": {
        "notice": "Stakes eurs LP tokens"
      },
      "unstake(address,bytes,bytes)": {
        "notice": "Unstakes eurs LP tokens"
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "notice": "Unstakes eurs LP tokens, then redeems them"
      }
    },
    "notice": "Adapter for liquidity provision in Curve's eurs pool (https://www.curve.fi/eurs)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}