{
  "address": "0x09120eAED8e4cD86D85a616680151DAA653880F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityGaugeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        },
        {
          "internalType": "address[3]",
          "name": "_aaveTokens",
          "type": "address[3]"
        },
        {
          "internalType": "address[3]",
          "name": "_underlyingTokens",
          "type": "address[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useUnderlying",
          "type": "bool"
        }
      ],
      "name": "getAssetByPoolIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "asset_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveAaveLiquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerCrvToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityGaugeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidityGaugeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "lendAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForAction",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "unstakeAndRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x09120eAED8e4cD86D85a616680151DAA653880F2",
    "transactionIndex": 0,
    "gasUsed": "2931443",
    "logsBloom": "0x00000000000000000000000000800000000000000000000000000000000000000000000000400000000000002000010020000000000000000000000000200002000000000000000008000000000000000000000000000000000100000001000000000000008000000000000000000000080000800000000000000000000000000000000000000000000000000000000000800000010000004100000000100000030000400000200000000080000000000000091020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000401000000000000000080000100000000000000000000000000000000",
    "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a",
    "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0xFa4AB6F16145d91862D06fE6C830Af14C8Ceda30",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0x01c1DeF3b91672704716159C9041Aeca392DdFfb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0xBcca60bB61934080951369a648Fb03DF4F96263C",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14283672,
        "transactionHash": "0x55e1ff7af719e143447b8768e8a8f043f05aea025dd62c81548df1b351b2afa3",
        "address": "0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000009120eaed8e4cd86d85a616680151daa653880f2",
          "0x000000000000000000000000d662908ada2ea1916b3318327a97eb18ad588b5d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x9f85f3cf26a8987467f529fc9c453659f9fcc2b932e31cc6d1ab95e86191791a"
      }
    ],
    "blockNumber": 14283672,
    "cumulativeGasUsed": "2931443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C85258d9A00C01d00ded98065ea3840dF06f09c",
    "0xd662908ADA2Ea1916B3318327A97eB18aD588b5d",
    "0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900",
    "0xd061D61a4d941c39E5453435B6345Dc261C2fcE0",
    "0xDeBF20617708857ebe4F679508E7b7863a8A8EeE",
    "0xd533a949740bb3306d119cc777fa900ba034cd52",
    [
      "0xFa4AB6F16145d91862D06fE6C830Af14C8Ceda30",
      "0xBcca60bB61934080951369a648Fb03DF4F96263C",
      "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811"
    ],
    [
      "0x01c1DeF3b91672704716159C9041Aeca392DdFfb",
      "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "0xdac17f958d2ee523a2206206994597c13d831ec7"
    ]
  ],
  "linkedData": {
    "nonSlippageAdapter": true,
    "type": "ADAPTER"
  },
  "solcInputHash": "98bd749f7e71b40180f647a72bc94975",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityGaugeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_aaveTokens\",\"type\":\"address[3]\"},{\"internalType\":\"address[3]\",\"name\":\"_underlyingTokens\",\"type\":\"address[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useUnderlying\",\"type\":\"bool\"}],\"name\":\"getAssetByPoolIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveAaveLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerCrvToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityGaugeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityGaugeToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Rewards tokens are not included as spend assets or incoming assets for claimRewards() or claimRewardsAndReinvest(). Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getCurveAaveLiquidityPool()\":{\"returns\":{\"pool_\":\"The `CURVE_AAVE_LIQUIDITY_POOL` variable value\"}},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"returns\":{\"crvToken_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\"}},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"returns\":{\"minter_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getLiquidityGaugeToken()\":{\"returns\":{\"liquidityGaugeToken_\":\"The `LIQUIDITY_GAUGE_TOKEN` variable value\"}},\"getLpToken()\":{\"returns\":{\"lpToken_\":\"The `LP_TOKEN` variable value\"}},\"lend(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"lendAndStake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForAction(address,bytes4,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"redeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"stake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstakeAndRedeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_assetData\":\"Parsed spend assets and incoming assets data for this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"CurveLiquidityAaveAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims rewards from the Curve liquidity gauge as well as pool-specific rewards\"},\"getAssetByPoolIndex(uint256,bool)\":{\"notice\":\"Gets an asset by its pool index and whether or not to use the underlying instead of the aToken\"},\"getCurveAaveLiquidityPool()\":{\"notice\":\"Gets the `CURVE_AAVE_LIQUIDITY_POOL` variable\"},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\"},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getLiquidityGaugeToken()\":{\"notice\":\"Gets the `LIQUIDITY_GAUGE_TOKEN` variable\"},\"getLpToken()\":{\"notice\":\"Gets the `LP_TOKEN` variable\"},\"lend(address,bytes,bytes)\":{\"notice\":\"Lends assets for LP tokens\"},\"lendAndStake(address,bytes,bytes)\":{\"notice\":\"Lends assets for LP tokens, then stakes the received LP tokens\"},\"parseAssetsForAction(address,bytes4,bytes)\":{\"notice\":\"Parses the expected assets in a particular action\"},\"redeem(address,bytes,bytes)\":{\"notice\":\"Redeems LP tokens\"},\"stake(address,bytes,bytes)\":{\"notice\":\"Stakes LP tokens\"},\"unstake(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens\"},\"unstakeAndRedeem(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens, then redeems them\"}},\"notice\":\"Adapter for liquidity provision in Curve's aave pool (https://www.curve.fi/aave)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityAaveAdapter.sol\":\"CurveLiquidityAaveAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer}\\n}\\n\",\"keccak256\":\"0x858506b4374948c01124d37df17fe4d1902631c752fd29afb65f82e36356072a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function parseAssetsForAction(\\n        address _vaultProxy,\\n        bytes4 _selector,\\n        bytes calldata _encodedCallArgs\\n    )\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x14b11777e21aceca340931832874342546731493bb169dbb4de736b16e9a7cc1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityAaveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/actions/CurveAaveLiquidityActionsMixin.sol\\\";\\nimport \\\"../utils/actions/CurveGaugeV2RewardsHandlerBase.sol\\\";\\nimport \\\"../utils/AdapterBase.sol\\\";\\n\\n/// @title CurveLiquidityAaveAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for liquidity provision in Curve's aave pool (https://www.curve.fi/aave)\\n/// @dev Rewards tokens are not included as spend assets or incoming assets for claimRewards()\\n/// or claimRewardsAndReinvest(). Rationale:\\n/// - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need\\n/// to enforce policy management or emit an event\\n/// - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\\ncontract CurveLiquidityAaveAdapter is\\n    AdapterBase,\\n    CurveGaugeV2RewardsHandlerBase,\\n    CurveAaveLiquidityActionsMixin\\n{\\n    address private immutable AAVE_DAI_TOKEN;\\n    address private immutable AAVE_USDC_TOKEN;\\n    address private immutable AAVE_USDT_TOKEN;\\n\\n    address private immutable DAI_TOKEN;\\n    address private immutable USDC_TOKEN;\\n    address private immutable USDT_TOKEN;\\n\\n    address private immutable LIQUIDITY_GAUGE_TOKEN;\\n    address private immutable LP_TOKEN;\\n\\n    constructor(\\n        address _integrationManager,\\n        address _liquidityGaugeToken,\\n        address _lpToken,\\n        address _minter,\\n        address _pool,\\n        address _crvToken,\\n        address[3] memory _aaveTokens, // [aDAI, aUSDC, aUSDT]\\n        address[3] memory _underlyingTokens // [DAI, USDC, USDT]\\n    )\\n        public\\n        AdapterBase(_integrationManager)\\n        CurveAaveLiquidityActionsMixin(_pool, _aaveTokens, _underlyingTokens)\\n        CurveGaugeV2RewardsHandlerBase(_minter, _crvToken)\\n    {\\n        AAVE_DAI_TOKEN = _aaveTokens[0];\\n        AAVE_USDC_TOKEN = _aaveTokens[1];\\n        AAVE_USDT_TOKEN = _aaveTokens[2];\\n\\n        DAI_TOKEN = _underlyingTokens[0];\\n        USDC_TOKEN = _underlyingTokens[1];\\n        USDT_TOKEN = _underlyingTokens[2];\\n\\n        LIQUIDITY_GAUGE_TOKEN = _liquidityGaugeToken;\\n        LP_TOKEN = _lpToken;\\n\\n        // Max approve liquidity gauge to spend LP token\\n        ERC20(_lpToken).safeApprove(_liquidityGaugeToken, type(uint256).max);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Claims rewards from the Curve liquidity gauge as well as pool-specific rewards\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        __curveGaugeV2ClaimAllRewards(LIQUIDITY_GAUGE_TOKEN, _vaultProxy);\\n    }\\n\\n    /// @notice Lends assets for LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAmounts,\\n            uint256 minIncomingLPTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        __curveAaveLend(orderedOutgoingAmounts, minIncomingLPTokenAmount, useUnderlyings);\\n    }\\n\\n    /// @notice Lends assets for LP tokens, then stakes the received LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function lendAndStake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAmounts,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        __curveAaveLend(\\n            orderedOutgoingAmounts,\\n            minIncomingLiquidityGaugeTokenAmount,\\n            useUnderlyings\\n        );\\n        __curveGaugeV2Stake(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            LP_TOKEN,\\n            ERC20(LP_TOKEN).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Redeems LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingLPTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool redeemSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        __curveAaveRedeem(\\n            outgoingLPTokenAmount,\\n            orderedMinIncomingAssetAmounts,\\n            redeemSingleAsset,\\n            useUnderlyings\\n        );\\n    }\\n\\n    /// @notice Stakes LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function stake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        uint256 outgoingLPTokenAmount = __decodeStakeCallArgs(_actionData);\\n\\n        __curveGaugeV2Stake(LIQUIDITY_GAUGE_TOKEN, LP_TOKEN, outgoingLPTokenAmount);\\n    }\\n\\n    /// @notice Unstakes LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function unstake(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_actionData);\\n\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, outgoingLiquidityGaugeTokenAmount);\\n    }\\n\\n    /// @notice Unstakes LP tokens, then redeems them\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function unstakeAndRedeem(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool redeemSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, outgoingLiquidityGaugeTokenAmount);\\n        __curveAaveRedeem(\\n            outgoingLiquidityGaugeTokenAmount,\\n            orderedMinIncomingAssetAmounts,\\n            redeemSingleAsset,\\n            useUnderlyings\\n        );\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets in a particular action\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _actionData Data specific to this action\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForAction(\\n        address,\\n        bytes4 _selector,\\n        bytes calldata _actionData\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards();\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_actionData);\\n        } else if (_selector == LEND_AND_STAKE_SELECTOR) {\\n            return __parseAssetsForLendAndStake(_actionData);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_actionData);\\n        } else if (_selector == STAKE_SELECTOR) {\\n            return __parseAssetsForStake(_actionData);\\n        } else if (_selector == UNSTAKE_SELECTOR) {\\n            return __parseAssetsForUnstake(_actionData);\\n        } else if (_selector == UNSTAKE_AND_REDEEM_SELECTOR) {\\n            return __parseAssetsForUnstakeAndRedeem(_actionData);\\n        }\\n\\n        revert(\\\"parseAssetsForAction: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls.\\n    /// No action required, all values empty.\\n    function __parseAssetsForClaimRewards()\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAssetAmounts,\\n            uint256 minIncomingLpTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            orderedOutgoingAssetAmounts,\\n            useUnderlyings\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lendAndStake() calls\\n    function __parseAssetsForLendAndStake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAssetAmounts,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            orderedOutgoingAssetAmounts,\\n            useUnderlyings\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool receiveSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            orderedMinIncomingAssetAmounts,\\n            receiveSingleAsset,\\n            useUnderlyings\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during stake() calls\\n    function __parseAssetsForStake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLpTokenAmount = __decodeStakeCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstake() calls\\n    function __parseAssetsForUnstake(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstakeAndRedeem() calls\\n    function __parseAssetsForUnstakeAndRedeem(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool receiveSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            orderedMinIncomingAssetAmounts,\\n            receiveSingleAsset,\\n            useUnderlyings\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend assets for redeem() and unstakeAndRedeem() calls\\n    function __parseIncomingAssetsForRedemptionCalls(\\n        uint256[3] memory _orderedMinIncomingAssetAmounts,\\n        bool _receiveSingleAsset,\\n        bool _useUnderlyings\\n    )\\n        private\\n        view\\n        returns (address[] memory incomingAssets_, uint256[] memory minIncomingAssetAmounts_)\\n    {\\n        if (_receiveSingleAsset) {\\n            incomingAssets_ = new address[](1);\\n            minIncomingAssetAmounts_ = new uint256[](1);\\n\\n            for (uint256 i; i < _orderedMinIncomingAssetAmounts.length; i++) {\\n                if (_orderedMinIncomingAssetAmounts[i] == 0) {\\n                    continue;\\n                }\\n\\n                // Validate that only one min asset amount is set\\n                for (uint256 j = i + 1; j < _orderedMinIncomingAssetAmounts.length; j++) {\\n                    require(\\n                        _orderedMinIncomingAssetAmounts[j] == 0,\\n                        \\\"__parseIncomingAssetsForRedemptionCalls: Too many min asset amounts specified\\\"\\n                    );\\n                }\\n\\n                incomingAssets_[0] = getAssetByPoolIndex(i, _useUnderlyings);\\n                minIncomingAssetAmounts_[0] = _orderedMinIncomingAssetAmounts[i];\\n\\n                break;\\n            }\\n            require(\\n                incomingAssets_[0] != address(0),\\n                \\\"__parseIncomingAssetsForRedemptionCalls: No min asset amount\\\"\\n            );\\n        } else {\\n            incomingAssets_ = new address[](3);\\n            minIncomingAssetAmounts_ = new uint256[](3);\\n            for (uint256 i; i < incomingAssets_.length; i++) {\\n                incomingAssets_[i] = getAssetByPoolIndex(i, _useUnderlyings);\\n                minIncomingAssetAmounts_[i] = _orderedMinIncomingAssetAmounts[i];\\n            }\\n        }\\n\\n        return (incomingAssets_, minIncomingAssetAmounts_);\\n    }\\n\\n    /// @dev Helper function to parse spend assets for lend() and lendAndStake() calls\\n    function __parseSpendAssetsForLendingCalls(\\n        uint256[3] memory _orderedOutgoingAssetAmounts,\\n        bool _useUnderlyings\\n    ) private view returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_) {\\n        uint256 spendAssetsCount;\\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\\n                spendAssetsCount++;\\n            }\\n        }\\n\\n        spendAssets_ = new address[](spendAssetsCount);\\n        spendAssetAmounts_ = new uint256[](spendAssetsCount);\\n        uint256 spendAssetsIndex;\\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\\n                spendAssets_[spendAssetsIndex] = getAssetByPoolIndex(i, _useUnderlyings);\\n                spendAssetAmounts_[spendAssetsIndex] = _orderedOutgoingAssetAmounts[i];\\n                spendAssetsIndex++;\\n            }\\n        }\\n\\n        return (spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode the encoded call arguments for lending\\n    function __decodeLendCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            uint256[3] memory orderedOutgoingAmounts_,\\n            uint256 minIncomingAssetAmount_,\\n            bool useUnderlyings_\\n        )\\n    {\\n        return abi.decode(_actionData, (uint256[3], uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for redeeming.\\n    /// If `receiveSingleAsset_` is `true`, then one (and only one) of\\n    /// the orderedMinIncomingAmounts_ must be >0 to indicate which asset is to be received.\\n    function __decodeRedeemCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingAssetAmount_,\\n            uint256[3] memory orderedMinIncomingAmounts_,\\n            bool receiveSingleAsset_,\\n            bool useUnderlyings_\\n        )\\n    {\\n        return abi.decode(_actionData, (uint256, uint256[3], bool, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for staking\\n    function __decodeStakeCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (uint256 outgoingLPTokenAmount_)\\n    {\\n        return abi.decode(_actionData, (uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for unstaking\\n    function __decodeUnstakeCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (uint256 outgoingLiquidityGaugeTokenAmount_)\\n    {\\n        return abi.decode(_actionData, (uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `LIQUIDITY_GAUGE_TOKEN` variable\\n    /// @return liquidityGaugeToken_ The `LIQUIDITY_GAUGE_TOKEN` variable value\\n    function getLiquidityGaugeToken() external view returns (address liquidityGaugeToken_) {\\n        return LIQUIDITY_GAUGE_TOKEN;\\n    }\\n\\n    /// @notice Gets the `LP_TOKEN` variable\\n    /// @return lpToken_ The `LP_TOKEN` variable value\\n    function getLpToken() external view returns (address lpToken_) {\\n        return LP_TOKEN;\\n    }\\n\\n    /// @notice Gets an asset by its pool index and whether or not to use the underlying\\n    /// instead of the aToken\\n    function getAssetByPoolIndex(uint256 _index, bool _useUnderlying)\\n        public\\n        view\\n        returns (address asset_)\\n    {\\n        if (_index == 0) {\\n            if (_useUnderlying) {\\n                return DAI_TOKEN;\\n            }\\n            return AAVE_DAI_TOKEN;\\n        } else if (_index == 1) {\\n            if (_useUnderlying) {\\n                return USDC_TOKEN;\\n            }\\n            return AAVE_USDC_TOKEN;\\n        } else if (_index == 2) {\\n            if (_useUnderlying) {\\n                return USDT_TOKEN;\\n            }\\n            return AAVE_USDT_TOKEN;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x414bddfac2c86d6b75bead64722bf23167d01c927a91b1804f0e5efac5bc2306\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../utils/AssetHelpers.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors, AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _assetData\\n    ) {\\n        _;\\n\\n        (, , address[] memory incomingAssets) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\\n        _;\\n\\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to decode the _assetData param passed to adapter call\\n    function __decodeAssetData(bytes memory _assetData)\\n        internal\\n        pure\\n        returns (\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return abi.decode(_assetData, (address[], uint256[], address[]));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x154cf5c2025f1c500bbfcbd4a8a6ed467d5e7f79f8625b56895b14cb6b176164\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0x46d92f56468d868acc2a6f78e80024edfcaf03d09625644c666ce1ab5603c34c\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveAaveLiquidityActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../../interfaces/ICurveStableSwapAave.sol\\\";\\n\\n/// @title CurveAaveLiquidityActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with the Curve Aave pool's liquidity functions\\nabstract contract CurveAaveLiquidityActionsMixin {\\n    using SafeERC20 for ERC20;\\n\\n    address private immutable CURVE_AAVE_LIQUIDITY_POOL;\\n\\n    constructor(\\n        address _pool,\\n        address[3] memory _aaveTokensToApprove,\\n        address[3] memory _underlyingTokensToApprove\\n    ) public {\\n        CURVE_AAVE_LIQUIDITY_POOL = _pool;\\n\\n        // Pre-approve pool to use max of each aToken and underlying,\\n        // as specified by the inheriting contract.\\n        // Use address(0) to skip a particular ordered asset.\\n        for (uint256 i; i < 3; i++) {\\n            if (_aaveTokensToApprove[i] != address(0)) {\\n                ERC20(_aaveTokensToApprove[i]).safeApprove(_pool, type(uint256).max);\\n            }\\n            if (_underlyingTokensToApprove[i] != address(0)) {\\n                ERC20(_underlyingTokensToApprove[i]).safeApprove(_pool, type(uint256).max);\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to add liquidity to the pool.\\n    /// _orderedOutgoingAssetAmounts = [aDAI, aUSDC, aUSDT].\\n    function __curveAaveLend(\\n        uint256[3] memory _orderedOutgoingAssetAmounts,\\n        uint256 _minIncomingLPTokenAmount,\\n        bool _useUnderlyings\\n    ) internal {\\n        ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).add_liquidity(\\n            _orderedOutgoingAssetAmounts,\\n            _minIncomingLPTokenAmount,\\n            _useUnderlyings\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity from the pool.\\n    /// if using _redeemSingleAsset, must pre-validate that one - and only one - asset\\n    /// has a non-zero _orderedMinIncomingAssetAmounts value.\\n    /// _orderedOutgoingAssetAmounts = [aDAI, aUSDC, aUSDT].\\n    function __curveAaveRedeem(\\n        uint256 _outgoingLPTokenAmount,\\n        uint256[3] memory _orderedMinIncomingAssetAmounts,\\n        bool _redeemSingleAsset,\\n        bool _useUnderlyings\\n    ) internal {\\n        if (_redeemSingleAsset) {\\n            // Assume that one - and only one - asset has a non-zero min incoming asset amount\\n            for (uint256 i; i < _orderedMinIncomingAssetAmounts.length; i++) {\\n                if (_orderedMinIncomingAssetAmounts[i] > 0) {\\n                    ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                        _outgoingLPTokenAmount,\\n                        int128(i),\\n                        _orderedMinIncomingAssetAmounts[i],\\n                        _useUnderlyings\\n                    );\\n                    return;\\n                }\\n            }\\n        } else {\\n            ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).remove_liquidity(\\n                _outgoingLPTokenAmount,\\n                _orderedMinIncomingAssetAmounts,\\n                _useUnderlyings\\n            );\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_AAVE_LIQUIDITY_POOL` variable\\n    /// @return pool_ The `CURVE_AAVE_LIQUIDITY_POOL` variable value\\n    function getCurveAaveLiquidityPool() public view returns (address pool_) {\\n        return CURVE_AAVE_LIQUIDITY_POOL;\\n    }\\n}\\n\",\"keccak256\":\"0x6d36b89a4514ca6ab92b977e6335ed6e4f2768d3d6e56e159caa10918dd84eca\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveLiquidityGaugeV2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title CurveGaugeV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with any Curve LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2ActionsMixin is AssetHelpers {\\n    uint256 private constant CURVE_GAUGE_V2_MAX_REWARDS = 8;\\n\\n    /// @dev Helper to claim pool-specific rewards\\n    function __curveGaugeV2ClaimRewards(address _gauge, address _target) internal {\\n        ICurveLiquidityGaugeV2(_gauge).claim_rewards(_target);\\n    }\\n\\n    /// @dev Helper to get list of pool-specific rewards tokens\\n    function __curveGaugeV2GetRewardsTokens(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        address[] memory lpRewardsTokensWithEmpties = new address[](CURVE_GAUGE_V2_MAX_REWARDS);\\n        uint256 rewardsTokensCount;\\n        for (uint256 i; i < CURVE_GAUGE_V2_MAX_REWARDS; i++) {\\n            address rewardToken = ICurveLiquidityGaugeV2(_gauge).reward_tokens(i);\\n            if (rewardToken != address(0)) {\\n                lpRewardsTokensWithEmpties[i] = rewardToken;\\n                rewardsTokensCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        rewardsTokens_ = new address[](rewardsTokensCount);\\n        for (uint256 i; i < rewardsTokensCount; i++) {\\n            rewardsTokens_[i] = lpRewardsTokensWithEmpties[i];\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to stake LP tokens\\n    function __curveGaugeV2Stake(\\n        address _gauge,\\n        address _lpToken,\\n        uint256 _amount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_lpToken, _gauge, _amount);\\n        ICurveLiquidityGaugeV2(_gauge).deposit(_amount, address(this));\\n    }\\n\\n    /// @dev Helper to unstake LP tokens\\n    function __curveGaugeV2Unstake(address _gauge, uint256 _amount) internal {\\n        ICurveLiquidityGaugeV2(_gauge).withdraw(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb297d967916d8560814b5d85ca8abedacf7d3c414390a0eb1179aa3adaa9be1b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2RewardsHandlerBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveMinter.sol\\\";\\nimport \\\"../../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"./CurveGaugeV2ActionsMixin.sol\\\";\\n\\n/// @title CurveGaugeV2RewardsHandlerBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base contract for handling claiming and reinvesting rewards for a Curve pool\\n/// that uses the LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2RewardsHandlerBase is CurveGaugeV2ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n\\n    constructor(address _minter, address _crvToken) public {\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN = _crvToken;\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER = _minter;\\n    }\\n\\n    /// @dev Helper to claim all rewards (CRV and pool-specific).\\n    /// Requires contract to be approved to use mint_for().\\n    function __curveGaugeV2ClaimAllRewards(address _gauge, address _target) internal {\\n        // Claim owed $CRV\\n        ICurveMinter(CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER).mint_for(_gauge, _target);\\n\\n        // Claim owed pool-specific rewards\\n        __curveGaugeV2ClaimRewards(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for staking LP tokens\\n    function __curveGaugeV2GetRewardsTokensWithCrv(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        return\\n            __curveGaugeV2GetRewardsTokens(_gauge).addUniqueItem(\\n                CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN\\n            );\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\\n    /// @return crvToken_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\\n    function getCurveGaugeV2RewardsHandlerCrvToken() public view returns (address crvToken_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    }\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\\n    /// @return minter_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\\n    function getCurveGaugeV2RewardsHandlerMinter() public view returns (address minter_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n    }\\n}\\n\",\"keccak256\":\"0x5567593fc3b76c4afb04d63ed9e08fb3761e15a71a8a6550ba4d98ec69c10053\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveLiquidityGaugeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityGaugeV2 interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveLiquidityGaugeV2 {\\n    function claim_rewards(address) external;\\n\\n    function deposit(uint256, address) external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0fbd9bdd7d7df1cd92c065ae3e62f1767d80914f086a0f146a2c9874aa7d4e30\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveMinter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveMinter {\\n    function mint_for(address, address) external;\\n}\\n\",\"keccak256\":\"0xbfe0cfa932805d9cda714d7ef7cb6b42d08c782b0ffa46de5e2c0530f4ce5ba1\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveStableSwapAave.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveStableSwapAave interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveStableSwapAave {\\n    function add_liquidity(\\n        uint256[3] calldata,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256,\\n        uint256[3] calldata,\\n        bool\\n    ) external returns (uint256[3] memory);\\n\\n    function remove_liquidity_one_coin(\\n        uint256,\\n        int128,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7baebad61301342e61f297f20834ca83d694aed649d6983e9230f3b960a38880\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x23809cb635aee1cd1aad36952627ce55739cf0bea3408819a0eddee2932936e7\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0xe52543e0c2ac52e6ce6bbe60aa91b7b72aff3a9682d312ce83743ee0bb7d304d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6102006040523480156200001257600080fd5b50604051620037053803806200370583398181016040526101808110156200003957600080fd5b5080516020820151604083015160608085015160808087015160a0808901516001600160601b031989871b811690945280861b841690915283851b831660c09081529482901b90921660e0529596949593949193929091908101906101200183828260005b600381101562000144576000838260038110620000b757fe5b60200201516001600160a01b03161462000103576200010384600019858460038110620000e057fe5b60200201516001600160a01b0316620001f460201b620015ee179092919060201c565b60008282600381106200011257fe5b60200201516001600160a01b0316146200013b576200013b84600019848460038110620000e057fe5b6001016200009e565b50505050816000600381106200015657fe5b602090810291909101516001600160601b0319606091821b81166101005284830151821b811661012052604080860151831b8216610140528451831b82166101605284840151831b821661018052840151821b81166101a05289821b81166101c0529088901b166101e052620001e6906001600160a01b03881690899060001990620001f4811b620015ee17901c565b505050505050505062000607565b8015806200027e575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200024e57600080fd5b505afa15801562000263573d6000803e3d6000fd5b505050506040513d60208110156200027a57600080fd5b5051155b620002bb5760405162461bcd60e51b8152600401808060200182810382526036815260200180620036cf6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620003139185916200031816565b505050565b606062000374826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003d460201b62001706179092919060201c565b80519091501562000313578080602001905160208110156200039557600080fd5b5051620003135760405162461bcd60e51b815260040180806020018281038252602a815260200180620036a5602a913960400191505060405180910390fd5b6060620003e58484600085620003ef565b90505b9392505050565b606082471015620004325760405162461bcd60e51b81526004018080602001828103825260268152602001806200367f6026913960400191505060405180910390fd5b6200043d8562000557565b6200048f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620004d05780518252601f199092019160209182019101620004af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000534576040519150601f19603f3d011682016040523d82523d6000602084013e62000539565b606091505b5090925090506200054c8282866200055d565b979650505050505050565b3b151590565b606083156200056e575081620003e8565b8251156200057f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005cb578181015183820152602001620005b1565b50505050905090810190601f168015620005f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c612f476200073860003980610c355280610c565280610ebe52806115c95280611fd8528061219a52806122a452806124da525080610c145280610e675280610e9a5280610fd752806110cb52806115a852806120ee5280612343528061243b528061258652508061140a5250806113ad5250806113505250806114315250806113d4525080611377525080610d60528061176e5280611c9b5280611d8b52508061147d5280611e4b525080610cf45250806109b55280610b1f5280610d8d5280610eeb528061106a5280611102528061145952806114ce5250612f476000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638214f5a4116100c3578063c54efee51161007c578063c54efee5146106b9578063dff5af991461087b578063e7c45690146108a0578063f003eb85146108a8578063f7d882b5146108b0578063fa7dd04d146108b85761014d565b80638214f5a4146104375780638334eb991461043f578063863e5ad01461050d578063b23228cf14610515578063b9dfbacc1461051d578063c29fa9dd146105eb5761014d565b8063332d709f11610115578063332d709f146103255780633ffc15911461034957806340da225d1461035157806358a647fa1461035957806368e30677146103615780637240b2251461042f5761014d565b8063080456c114610152578063099f751514610177578063131461c014610247578063257cb1a31461024f57806329fa046e14610257575b600080fd5b61015a610986565b604080516001600160e01b03199092168252519081900360200190f35b6102456004803603606081101561018d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101b757600080fd5b8201836020820111156101c957600080fd5b803590602001918460018302840111600160201b831117156101ea57600080fd5b919390929091602081019035600160201b81111561020757600080fd5b82018360208201111561021957600080fd5b803590602001918460018302840111600160201b8311171561023a57600080fd5b5090925090506109aa565b005b61015a610acc565b61015a610af0565b6102456004803603606081101561026d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561029757600080fd5b8201836020820111156102a957600080fd5b803590602001918460018302840111600160201b831117156102ca57600080fd5b919390929091602081019035600160201b8111156102e757600080fd5b8201836020820111156102f957600080fd5b803590602001918460018302840111600160201b8311171561031a57600080fd5b509092509050610b14565b61032d610cf2565b604080516001600160a01b039092168252519081900360200190f35b61015a610d16565b61015a610d3a565b61032d610d5e565b6102456004803603606081101561037757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a157600080fd5b8201836020820111156103b357600080fd5b803590602001918460018302840111600160201b831117156103d457600080fd5b919390929091602081019035600160201b8111156103f157600080fd5b82018360208201111561040357600080fd5b803590602001918460018302840111600160201b8311171561042457600080fd5b509092509050610d82565b61032d610e98565b61032d610ebc565b6102456004803603606081101561045557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561047f57600080fd5b82018360208201111561049157600080fd5b803590602001918460018302840111600160201b831117156104b257600080fd5b919390929091602081019035600160201b8111156104cf57600080fd5b8201836020820111156104e157600080fd5b803590602001918460018302840111600160201b8311171561050257600080fd5b509092509050610ee0565b61015a611017565b61015a61103b565b6102456004803603606081101561053357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561055d57600080fd5b82018360208201111561056f57600080fd5b803590602001918460018302840111600160201b8311171561059057600080fd5b919390929091602081019035600160201b8111156105ad57600080fd5b8201836020820111156105bf57600080fd5b803590602001918460018302840111600160201b831117156105e057600080fd5b50909250905061105f565b6102456004803603606081101561060157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561062b57600080fd5b82018360208201111561063d57600080fd5b803590602001918460018302840111600160201b8311171561065e57600080fd5b919390929091602081019035600160201b81111561067b57600080fd5b82018360208201111561068d57600080fd5b803590602001918460018302840111600160201b831117156106ae57600080fd5b5090925090506110f7565b610746600480360360608110156106cf57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561070857600080fd5b82018360208201111561071a57600080fd5b803590602001918460018302840111600160201b8311171561073b57600080fd5b5090925090506111f5565b6040518086600281111561075657fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156107a357818101518382015260200161078b565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107e25781810151838201526020016107ca565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610821578181015183820152602001610809565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610860578181015183820152602001610848565b50505050905001995050505050505050505060405180910390f35b61032d6004803603604081101561089157600080fd5b50803590602001351515611340565b61032d611457565b61032d61147b565b61015a61149f565b610245600480360360608110156108ce57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108f857600080fd5b82018360208201111561090a57600080fd5b803590602001918460018302840111600160201b8311171561092b57600080fd5b919390929091602081019035600160201b81111561094857600080fd5b82018360208201111561095a57600080fd5b803590602001918460018302840111600160201b8311171561097b57600080fd5b5090925090506114c3565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a115760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a529250612d8b915050565b600080610a9489898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250610aa5838383611757565b5050506060610ab38261181e565b92505050610ac183826119db565b505050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b7b5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bbc9250612d8b915050565b600080610bfe89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250610c0f838383611757565b610aa57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b5051611b36565b7f000000000000000000000000000000000000000000000000000000000000000090565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610de95760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450610e6093509091508990899081908401838280828437600092019190915250611bac92505050565b9050610e8c7f000000000000000000000000000000000000000000000000000000000000000082611bcb565b506060610ab38261181e565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f475760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610f889150612d8b9050565b600080610fca8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b9350935093509350610ffc7f000000000000000000000000000000000000000000000000000000000000000085611bcb565b61100884848484611c6e565b505050506060610ab38261181e565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110c65760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b6110f07f000000000000000000000000000000000000000000000000000000000000000086611e49565b5050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461115e5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250925061119f9150612d8b9050565b6000806111e18a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b935093509350935061100884848484611c6e565b600060608080806001600160e01b03198816632e77eeb360e21b141561122c5761121d611eef565b94509450945094509450611335565b6001600160e01b0319881663099f751560e01b141561124f5761121d8787611f4f565b6001600160e01b031988166314fd023760e11b14156112725761121d8787612065565b6001600160e01b0319881663c29fa9dd60e01b14156112955761121d878761211a565b6001600160e01b0319881663fa7dd04d60e01b14156112b85761121d8787612237565b6001600160e01b031988166368e3067760e01b14156112db5761121d87876123ce565b6001600160e01b03198816638334eb9960e01b14156112fe5761121d8787612506565b60405162461bcd60e51b8152600401808060200182810382526027815260200180612eeb6027913960400191505060405180910390fd5b945094509450945094565b60008261139b57811561137457507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f0000000000000000000000000000000000000000000000000000000000000000611451565b82600114156113f85781156113d157507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f0000000000000000000000000000000000000000000000000000000000000000611451565b826002141561145157811561142e57507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f00000000000000000000000000000000000000000000000000000000000000005b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461152a5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194506115a193509091508990899081908401838280828437600092019190915250611bac92505050565b9050610e8c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083611b36565b801580611674575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561164657600080fd5b505afa15801561165a573d6000803e3d6000fd5b505050506040513d602081101561167057600080fd5b5051155b6116af5760405162461bcd60e51b8152600401808060200182810382526036815260200180612eb56036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526117019084906125b2565b505050565b60606117158484600085612663565b90505b9392505050565b611727612d8b565b6000808380602001905160a081101561173f57600080fd5b50606081015160808201519196909550909350915050565b6040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a908590859085906004018084606080838360005b838110156117c05781810151838201526020016117a8565b5050505090500183815260200182151581526020019350505050602060405180830381600087803b1580156117f457600080fd5b505af1158015611808573d6000803e3d6000fd5b505050506040513d60208110156110f057600080fd5b606080606083806020019051606081101561183857600080fd5b8101908080516040519392919084600160201b82111561185757600080fd5b90830190602082018581111561186c57600080fd5b82518660208202830111600160201b8211171561188857600080fd5b82525081516020918201928201910280838360005b838110156118b557818101518382015260200161189d565b5050505090500160405260200180516040519392919084600160201b8211156118dd57600080fd5b9083019060208201858111156118f257600080fd5b82518660208202830111600160201b8211171561190e57600080fd5b82525081516020918201928201910280838360005b8381101561193b578181015183820152602001611923565b5050505090500160405260200180516040519392919084600160201b82111561196357600080fd5b90830190602082018581111561197857600080fd5b82518660208202830111600160201b8211171561199457600080fd5b82525081516020918201928201910280838360005b838110156119c15781810151838201526020016119a9565b505050509050016040525050509250925092509193909250565b6060815167ffffffffffffffff811180156119f557600080fd5b50604051908082528060200260200182016040528015611a1f578160200160208202803683370190505b50905060005b8251811015611b2f576000838281518110611a3c57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a9357600080fd5b505afa158015611aa7573d6000803e3d6000fd5b505050506040513d6020811015611abd57600080fd5b50518351849084908110611acd57fe5b6020026020010181815250506000838381518110611ae757fe5b60200260200101511115611b2657611b2685848481518110611b0557fe5b6020026020010151836001600160a01b03166127bf9092919063ffffffff16565b50600101611a25565b5092915050565b611b41828483612811565b60408051636e553f6560e01b81526004810183905230602482015290516001600160a01b03851691636e553f6591604480830192600092919082900301818387803b158015611b8f57600080fd5b505af1158015611ba3573d6000803e3d6000fd5b50505050505050565b6000818060200190516020811015611bc357600080fd5b505192915050565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c1157600080fd5b505af1158015611c25573d6000803e3d6000fd5b505050505050565b6000611c37612d8b565b6000808480602001905160c0811015611c4f57600080fd5b508051608082015160a083015191986020909301975095509350915050565b8115611d6d5760005b6003811015611d67576000848260038110611c8e57fe5b60200201511115611d5f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517a55a38683878560038110611cd657fe5b6020020151866040518563ffffffff1660e01b81526004018085815260200184600f0b81526020018381526020018215158152602001945050505050602060405180830381600087803b158015611d2c57600080fd5b505af1158015611d40573d6000803e3d6000fd5b505050506040513d6020811015611d5657600080fd5b50611e43915050565b600101611c77565b50611e43565b604051637e73239b60e11b8152600481018581526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163fce647369187918791869160240183606080838360005b83811015611ddc578181015183820152602001611dc4565b5050505090500182151581526020019350505050606060405180830381600087803b158015611e0a57600080fd5b505af1158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506060811015611c2557600080fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166327f18ae383836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015611ec957600080fd5b505af1158015611edd573d6000803e3d6000fd5b50505050611eeb82826128c9565b5050565b600060608080808480604051908082528060200260200182016040528015611f21578160200160208202803683370190505b5060408051600080825260208201818152828401918252606083019093529399929850965094509092509050565b6000606080606080611f5f612d8b565b600080611fa18a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250611fb18382612918565b604080516001808252818301909252929950909750602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061200457fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350818460008151811061204857fe5b602002602001018181525050600297505050509295509295909350565b6000606080606080612075612d8b565b6000806120b78a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b9250925092506120c78382612918565b604080516001808252818301909252929950909750602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061200457fe5b6000606080606080600061212c612d8b565b60008061216e8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f0000000000000000000000000000000000000000000000000000000000000000886000815181106121c657fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650838760008151811061220a57fe5b602002602001018181525050612221838383612a76565b60029d999c50979a509850959695505050505050565b6000606080606080600061228088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bac92505050565b604080516001808252818301909252919250602080830190803683370190505094507f0000000000000000000000000000000000000000000000000000000000000000856000815181106122d057fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061231457fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061236f57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080826000815181106123b357fe5b60200260200101818152505060029550509295509295909350565b6000606080606080600061241788888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bac92505050565b604080516001808252818301909252919250602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061246757fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050935080846000815181106124ab57fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061236f57fe5b60006060806060806000612518612d8b565b60008061255a8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f0000000000000000000000000000000000000000000000000000000000000000886000815181106121c657fe5b6060612607826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117069092919063ffffffff16565b8051909150156117015780806020019051602081101561262657600080fd5b50516117015760405162461bcd60e51b815260040180806020018281038252602a815260200180612e8b602a913960400191505060405180910390fd5b6060824710156126a45760405162461bcd60e51b8152600401808060200182810382526026815260200180612daa6026913960400191505060405180910390fd5b6126ad85612ce1565b6126fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061273d5780518252601f19909201916020918201910161271e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461279f576040519150601f19603f3d011682016040523d82523d6000602084013e6127a4565b606091505b50915091506127b4828286612ce7565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117019084906125b2565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561286257600080fd5b505afa158015612876573d6000803e3d6000fd5b505050506040513d602081101561288c57600080fd5b5051905081811015611e435780156128b3576128b36001600160a01b0385168460006115ee565b611e436001600160a01b038516846000196115ee565b816001600160a01b03166384e9bd7e826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611c1157600080fd5b6060806000805b600381101561295057600086826003811061293657fe5b60200201511115612948576001909101905b60010161291f565b508067ffffffffffffffff8111801561296857600080fd5b50604051908082528060200260200182016040528015612992578160200160208202803683370190505b5092508067ffffffffffffffff811180156129ac57600080fd5b506040519080825280602002602001820160405280156129d6578160200160208202803683370190505b5091506000805b6003811015612a6c5760008782600381106129f457fe5b60200201511115612a6457612a098187611340565b858381518110612a1557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050868160038110612a4157fe5b6020020151848381518110612a5257fe5b60209081029190910101526001909101905b6001016129dd565b5050509250929050565b6060808315612c23576040805160018082528183019092529060208083019080368337505060408051600180825281830190925292945090506020808301908036833701905050905060005b6003811015612bb757858160038110612ad757fe5b6020020151612ae557612baf565b600181015b6003811015612b4857868160038110612aff57fe5b602002015115612b405760405162461bcd60e51b815260040180806020018281038252604d815260200180612e02604d913960600191505060405180910390fd5b600101612aea565b50612b538185611340565b83600081518110612b6057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160038110612b8c57fe5b602002015182600081518110612b9e57fe5b602002602001018181525050612bb7565b600101612ac2565b5060006001600160a01b031682600081518110612bd057fe5b60200260200101516001600160a01b03161415612c1e5760405162461bcd60e51b815260040180806020018281038252603c815260200180612e4f603c913960400191505060405180910390fd5b612cd9565b60408051600380825260808201909252906020820160608036833750506040805160038082526080820190925292945090506020820160608036833701905050905060005b8251811015612cd757612c7b8185611340565b838281518110612c8757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160038110612cb357fe5b6020020151828281518110612cc457fe5b6020908102919091010152600101612c68565b505b935093915050565b3b151590565b60608315612cf6575081611718565b825115612d065782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d50578181015183820152602001612d38565b50505050905090810190601f168015612d7d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e5f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a20546f6f206d616e79206d696e20617373657420616d6f756e7473207370656369666965645f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a204e6f206d696e20617373657420616d6f756e745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63657061727365417373657473466f72416374696f6e3a205f73656c6563746f7220696e76616c6964a2646970667358221220a45d7209be8dc25971969225ffb9ca08e895029049354814e796a9f00ec8802b64736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80638214f5a4116100c3578063c54efee51161007c578063c54efee5146106b9578063dff5af991461087b578063e7c45690146108a0578063f003eb85146108a8578063f7d882b5146108b0578063fa7dd04d146108b85761014d565b80638214f5a4146104375780638334eb991461043f578063863e5ad01461050d578063b23228cf14610515578063b9dfbacc1461051d578063c29fa9dd146105eb5761014d565b8063332d709f11610115578063332d709f146103255780633ffc15911461034957806340da225d1461035157806358a647fa1461035957806368e30677146103615780637240b2251461042f5761014d565b8063080456c114610152578063099f751514610177578063131461c014610247578063257cb1a31461024f57806329fa046e14610257575b600080fd5b61015a610986565b604080516001600160e01b03199092168252519081900360200190f35b6102456004803603606081101561018d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101b757600080fd5b8201836020820111156101c957600080fd5b803590602001918460018302840111600160201b831117156101ea57600080fd5b919390929091602081019035600160201b81111561020757600080fd5b82018360208201111561021957600080fd5b803590602001918460018302840111600160201b8311171561023a57600080fd5b5090925090506109aa565b005b61015a610acc565b61015a610af0565b6102456004803603606081101561026d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561029757600080fd5b8201836020820111156102a957600080fd5b803590602001918460018302840111600160201b831117156102ca57600080fd5b919390929091602081019035600160201b8111156102e757600080fd5b8201836020820111156102f957600080fd5b803590602001918460018302840111600160201b8311171561031a57600080fd5b509092509050610b14565b61032d610cf2565b604080516001600160a01b039092168252519081900360200190f35b61015a610d16565b61015a610d3a565b61032d610d5e565b6102456004803603606081101561037757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a157600080fd5b8201836020820111156103b357600080fd5b803590602001918460018302840111600160201b831117156103d457600080fd5b919390929091602081019035600160201b8111156103f157600080fd5b82018360208201111561040357600080fd5b803590602001918460018302840111600160201b8311171561042457600080fd5b509092509050610d82565b61032d610e98565b61032d610ebc565b6102456004803603606081101561045557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561047f57600080fd5b82018360208201111561049157600080fd5b803590602001918460018302840111600160201b831117156104b257600080fd5b919390929091602081019035600160201b8111156104cf57600080fd5b8201836020820111156104e157600080fd5b803590602001918460018302840111600160201b8311171561050257600080fd5b509092509050610ee0565b61015a611017565b61015a61103b565b6102456004803603606081101561053357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561055d57600080fd5b82018360208201111561056f57600080fd5b803590602001918460018302840111600160201b8311171561059057600080fd5b919390929091602081019035600160201b8111156105ad57600080fd5b8201836020820111156105bf57600080fd5b803590602001918460018302840111600160201b831117156105e057600080fd5b50909250905061105f565b6102456004803603606081101561060157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561062b57600080fd5b82018360208201111561063d57600080fd5b803590602001918460018302840111600160201b8311171561065e57600080fd5b919390929091602081019035600160201b81111561067b57600080fd5b82018360208201111561068d57600080fd5b803590602001918460018302840111600160201b831117156106ae57600080fd5b5090925090506110f7565b610746600480360360608110156106cf57600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561070857600080fd5b82018360208201111561071a57600080fd5b803590602001918460018302840111600160201b8311171561073b57600080fd5b5090925090506111f5565b6040518086600281111561075657fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156107a357818101518382015260200161078b565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107e25781810151838201526020016107ca565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610821578181015183820152602001610809565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610860578181015183820152602001610848565b50505050905001995050505050505050505060405180910390f35b61032d6004803603604081101561089157600080fd5b50803590602001351515611340565b61032d611457565b61032d61147b565b61015a61149f565b610245600480360360608110156108ce57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108f857600080fd5b82018360208201111561090a57600080fd5b803590602001918460018302840111600160201b8311171561092b57600080fd5b919390929091602081019035600160201b81111561094857600080fd5b82018360208201111561095a57600080fd5b803590602001918460018302840111600160201b8311171561097b57600080fd5b5090925090506114c3565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a115760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a529250612d8b915050565b600080610a9489898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250610aa5838383611757565b5050506060610ab38261181e565b92505050610ac183826119db565b505050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b7b5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bbc9250612d8b915050565b600080610bfe89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250610c0f838383611757565b610aa57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b5051611b36565b7f000000000000000000000000000000000000000000000000000000000000000090565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610de95760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450610e6093509091508990899081908401838280828437600092019190915250611bac92505050565b9050610e8c7f000000000000000000000000000000000000000000000000000000000000000082611bcb565b506060610ab38261181e565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f475760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610f889150612d8b9050565b600080610fca8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b9350935093509350610ffc7f000000000000000000000000000000000000000000000000000000000000000085611bcb565b61100884848484611c6e565b505050506060610ab38261181e565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110c65760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b6110f07f000000000000000000000000000000000000000000000000000000000000000086611e49565b5050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461115e5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250925061119f9150612d8b9050565b6000806111e18a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b935093509350935061100884848484611c6e565b600060608080806001600160e01b03198816632e77eeb360e21b141561122c5761121d611eef565b94509450945094509450611335565b6001600160e01b0319881663099f751560e01b141561124f5761121d8787611f4f565b6001600160e01b031988166314fd023760e11b14156112725761121d8787612065565b6001600160e01b0319881663c29fa9dd60e01b14156112955761121d878761211a565b6001600160e01b0319881663fa7dd04d60e01b14156112b85761121d8787612237565b6001600160e01b031988166368e3067760e01b14156112db5761121d87876123ce565b6001600160e01b03198816638334eb9960e01b14156112fe5761121d8787612506565b60405162461bcd60e51b8152600401808060200182810382526027815260200180612eeb6027913960400191505060405180910390fd5b945094509450945094565b60008261139b57811561137457507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f0000000000000000000000000000000000000000000000000000000000000000611451565b82600114156113f85781156113d157507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f0000000000000000000000000000000000000000000000000000000000000000611451565b826002141561145157811561142e57507f0000000000000000000000000000000000000000000000000000000000000000611451565b507f00000000000000000000000000000000000000000000000000000000000000005b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461152a5760405162461bcd60e51b8152600401808060200182810382526032815260200180612dd06032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194506115a193509091508990899081908401838280828437600092019190915250611bac92505050565b9050610e8c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083611b36565b801580611674575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561164657600080fd5b505afa15801561165a573d6000803e3d6000fd5b505050506040513d602081101561167057600080fd5b5051155b6116af5760405162461bcd60e51b8152600401808060200182810382526036815260200180612eb56036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526117019084906125b2565b505050565b60606117158484600085612663565b90505b9392505050565b611727612d8b565b6000808380602001905160a081101561173f57600080fd5b50606081015160808201519196909550909350915050565b6040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a908590859085906004018084606080838360005b838110156117c05781810151838201526020016117a8565b5050505090500183815260200182151581526020019350505050602060405180830381600087803b1580156117f457600080fd5b505af1158015611808573d6000803e3d6000fd5b505050506040513d60208110156110f057600080fd5b606080606083806020019051606081101561183857600080fd5b8101908080516040519392919084600160201b82111561185757600080fd5b90830190602082018581111561186c57600080fd5b82518660208202830111600160201b8211171561188857600080fd5b82525081516020918201928201910280838360005b838110156118b557818101518382015260200161189d565b5050505090500160405260200180516040519392919084600160201b8211156118dd57600080fd5b9083019060208201858111156118f257600080fd5b82518660208202830111600160201b8211171561190e57600080fd5b82525081516020918201928201910280838360005b8381101561193b578181015183820152602001611923565b5050505090500160405260200180516040519392919084600160201b82111561196357600080fd5b90830190602082018581111561197857600080fd5b82518660208202830111600160201b8211171561199457600080fd5b82525081516020918201928201910280838360005b838110156119c15781810151838201526020016119a9565b505050509050016040525050509250925092509193909250565b6060815167ffffffffffffffff811180156119f557600080fd5b50604051908082528060200260200182016040528015611a1f578160200160208202803683370190505b50905060005b8251811015611b2f576000838281518110611a3c57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a9357600080fd5b505afa158015611aa7573d6000803e3d6000fd5b505050506040513d6020811015611abd57600080fd5b50518351849084908110611acd57fe5b6020026020010181815250506000838381518110611ae757fe5b60200260200101511115611b2657611b2685848481518110611b0557fe5b6020026020010151836001600160a01b03166127bf9092919063ffffffff16565b50600101611a25565b5092915050565b611b41828483612811565b60408051636e553f6560e01b81526004810183905230602482015290516001600160a01b03851691636e553f6591604480830192600092919082900301818387803b158015611b8f57600080fd5b505af1158015611ba3573d6000803e3d6000fd5b50505050505050565b6000818060200190516020811015611bc357600080fd5b505192915050565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c1157600080fd5b505af1158015611c25573d6000803e3d6000fd5b505050505050565b6000611c37612d8b565b6000808480602001905160c0811015611c4f57600080fd5b508051608082015160a083015191986020909301975095509350915050565b8115611d6d5760005b6003811015611d67576000848260038110611c8e57fe5b60200201511115611d5f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517a55a38683878560038110611cd657fe5b6020020151866040518563ffffffff1660e01b81526004018085815260200184600f0b81526020018381526020018215158152602001945050505050602060405180830381600087803b158015611d2c57600080fd5b505af1158015611d40573d6000803e3d6000fd5b505050506040513d6020811015611d5657600080fd5b50611e43915050565b600101611c77565b50611e43565b604051637e73239b60e11b8152600481018581526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163fce647369187918791869160240183606080838360005b83811015611ddc578181015183820152602001611dc4565b5050505090500182151581526020019350505050606060405180830381600087803b158015611e0a57600080fd5b505af1158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506060811015611c2557600080fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166327f18ae383836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015611ec957600080fd5b505af1158015611edd573d6000803e3d6000fd5b50505050611eeb82826128c9565b5050565b600060608080808480604051908082528060200260200182016040528015611f21578160200160208202803683370190505b5060408051600080825260208201818152828401918252606083019093529399929850965094509092509050565b6000606080606080611f5f612d8b565b600080611fa18a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b925092509250611fb18382612918565b604080516001808252818301909252929950909750602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061200457fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350818460008151811061204857fe5b602002602001018181525050600297505050509295509295909350565b6000606080606080612075612d8b565b6000806120b78a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061171f92505050565b9250925092506120c78382612918565b604080516001808252818301909252929950909750602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061200457fe5b6000606080606080600061212c612d8b565b60008061216e8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f0000000000000000000000000000000000000000000000000000000000000000886000815181106121c657fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650838760008151811061220a57fe5b602002602001018181525050612221838383612a76565b60029d999c50979a509850959695505050505050565b6000606080606080600061228088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bac92505050565b604080516001808252818301909252919250602080830190803683370190505094507f0000000000000000000000000000000000000000000000000000000000000000856000815181106122d057fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061231457fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061236f57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080826000815181106123b357fe5b60200260200101818152505060029550509295509295909350565b6000606080606080600061241788888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bac92505050565b604080516001808252818301909252919250602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061246757fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050935080846000815181106124ab57fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061236f57fe5b60006060806060806000612518612d8b565b60008061255a8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2d92505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f0000000000000000000000000000000000000000000000000000000000000000886000815181106121c657fe5b6060612607826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117069092919063ffffffff16565b8051909150156117015780806020019051602081101561262657600080fd5b50516117015760405162461bcd60e51b815260040180806020018281038252602a815260200180612e8b602a913960400191505060405180910390fd5b6060824710156126a45760405162461bcd60e51b8152600401808060200182810382526026815260200180612daa6026913960400191505060405180910390fd5b6126ad85612ce1565b6126fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061273d5780518252601f19909201916020918201910161271e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461279f576040519150601f19603f3d011682016040523d82523d6000602084013e6127a4565b606091505b50915091506127b4828286612ce7565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117019084906125b2565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561286257600080fd5b505afa158015612876573d6000803e3d6000fd5b505050506040513d602081101561288c57600080fd5b5051905081811015611e435780156128b3576128b36001600160a01b0385168460006115ee565b611e436001600160a01b038516846000196115ee565b816001600160a01b03166384e9bd7e826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015611c1157600080fd5b6060806000805b600381101561295057600086826003811061293657fe5b60200201511115612948576001909101905b60010161291f565b508067ffffffffffffffff8111801561296857600080fd5b50604051908082528060200260200182016040528015612992578160200160208202803683370190505b5092508067ffffffffffffffff811180156129ac57600080fd5b506040519080825280602002602001820160405280156129d6578160200160208202803683370190505b5091506000805b6003811015612a6c5760008782600381106129f457fe5b60200201511115612a6457612a098187611340565b858381518110612a1557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050868160038110612a4157fe5b6020020151848381518110612a5257fe5b60209081029190910101526001909101905b6001016129dd565b5050509250929050565b6060808315612c23576040805160018082528183019092529060208083019080368337505060408051600180825281830190925292945090506020808301908036833701905050905060005b6003811015612bb757858160038110612ad757fe5b6020020151612ae557612baf565b600181015b6003811015612b4857868160038110612aff57fe5b602002015115612b405760405162461bcd60e51b815260040180806020018281038252604d815260200180612e02604d913960600191505060405180910390fd5b600101612aea565b50612b538185611340565b83600081518110612b6057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160038110612b8c57fe5b602002015182600081518110612b9e57fe5b602002602001018181525050612bb7565b600101612ac2565b5060006001600160a01b031682600081518110612bd057fe5b60200260200101516001600160a01b03161415612c1e5760405162461bcd60e51b815260040180806020018281038252603c815260200180612e4f603c913960400191505060405180910390fd5b612cd9565b60408051600380825260808201909252906020820160608036833750506040805160038082526080820190925292945090506020820160608036833701905050905060005b8251811015612cd757612c7b8185611340565b838281518110612c8757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160038110612cb357fe5b6020020151828281518110612cc457fe5b6020908102919091010152600101612c68565b505b935093915050565b3b151590565b60608315612cf6575081611718565b825115612d065782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d50578181015183820152602001612d38565b50505050905090810190601f168015612d7d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e5f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a20546f6f206d616e79206d696e20617373657420616d6f756e7473207370656369666965645f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a204e6f206d696e20617373657420616d6f756e745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63657061727365417373657473466f72416374696f6e3a205f73656c6563746f7220696e76616c6964a2646970667358221220a45d7209be8dc25971969225ffb9ca08e895029049354814e796a9f00ec8802b64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Rewards tokens are not included as spend assets or incoming assets for claimRewards() or claimRewardsAndReinvest(). Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, in which case they cannot be tracked",
    "kind": "dev",
    "methods": {
      "claimRewards(address,bytes,bytes)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "getCurveAaveLiquidityPool()": {
        "returns": {
          "pool_": "The `CURVE_AAVE_LIQUIDITY_POOL` variable value"
        }
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "returns": {
          "crvToken_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value"
        }
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "returns": {
          "minter_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getLiquidityGaugeToken()": {
        "returns": {
          "liquidityGaugeToken_": "The `LIQUIDITY_GAUGE_TOKEN` variable value"
        }
      },
      "getLpToken()": {
        "returns": {
          "lpToken_": "The `LP_TOKEN` variable value"
        }
      },
      "lend(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "lendAndStake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "parseAssetsForAction(address,bytes4,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "redeem(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "stake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstake(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "params": {
          "_actionData": "Data specific to this action",
          "_assetData": "Parsed spend assets and incoming assets data for this action",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "CurveLiquidityAaveAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards(address,bytes,bytes)": {
        "notice": "Claims rewards from the Curve liquidity gauge as well as pool-specific rewards"
      },
      "getAssetByPoolIndex(uint256,bool)": {
        "notice": "Gets an asset by its pool index and whether or not to use the underlying instead of the aToken"
      },
      "getCurveAaveLiquidityPool()": {
        "notice": "Gets the `CURVE_AAVE_LIQUIDITY_POOL` variable"
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable"
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getLiquidityGaugeToken()": {
        "notice": "Gets the `LIQUIDITY_GAUGE_TOKEN` variable"
      },
      "getLpToken()": {
        "notice": "Gets the `LP_TOKEN` variable"
      },
      "lend(address,bytes,bytes)": {
        "notice": "Lends assets for LP tokens"
      },
      "lendAndStake(address,bytes,bytes)": {
        "notice": "Lends assets for LP tokens, then stakes the received LP tokens"
      },
      "parseAssetsForAction(address,bytes4,bytes)": {
        "notice": "Parses the expected assets in a particular action"
      },
      "redeem(address,bytes,bytes)": {
        "notice": "Redeems LP tokens"
      },
      "stake(address,bytes,bytes)": {
        "notice": "Stakes LP tokens"
      },
      "unstake(address,bytes,bytes)": {
        "notice": "Unstakes LP tokens"
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "notice": "Unstakes LP tokens, then redeems them"
      }
    },
    "notice": "Adapter for liquidity provision in Curve's aave pool (https://www.curve.fi/aave)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}